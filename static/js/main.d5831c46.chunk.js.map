{"version":3,"sources":["logo.svg","Component/Rectangle.js","Component/Canvas.js","Component/Properties.js","Component/Model.js","Data/Template.js","Data/Layout.js","Component/Header.js","Component/Tree.js","Component/Designer.js","App.js","serviceWorker.js","index.js"],"names":["Rectangle","shapeProps","isSelected","onSelect","onChange","shapeRef","React","useRef","trRef","useEffect","console","log","current","setNodes","getLayer","batchDraw","Fragment","onClick","onTap","ref","draggable","onDragEnd","e","target","x","y","width","height","X","Math","abs","floor","Y","Width","Height","rotation","onTransformEnd","node","scaleX","scaleY","max","boundBoxFunc","oldBox","newBox","CanvasStyle","styled","div","Canvas","rectangles","setRectangles","selectedShape","setSelectedShape","imageBase64","imageRef","useState","image","selectImage","window","innerWidth","imageWidth","selectImageWidth","innerHeight","imageHeight","selectImageHeight","selectBackGroundImage","a","undefined","includes","b","_base64ToArrayBuffer","ifds","UTIF","decode","firstPageOfTif","decodeImage","rgba","toRGBA8","cnv","document","createElement","ctx","getContext","imageData","createImageData","i","length","data","putImageData","err","img","Image","onload","onerror","src","BASE64_MARKER","dataURI","base64Index","indexOf","base64","substring","Uint8Array","from","atob","c","charCodeAt","checkDeselect","GetRectangle","rect","Id","newAttrs","Coordinate","X1","Y1","X2","Y2","rects","slice","keys","NavigationKey","split","levels","index","findIndex","SubData","index1","index2","onMouseDown","onTouchStart","stroke","strokeWidth","cells","Shapes","map","cell","push","Array","isArray","Object","values","subCell","GetAllShapes","Container","ControlProperties","item","GroupCoordinate","prop","label","placeholder","value","Form","Group","as","Row","controlId","Label","column","lg","Col","sm","Control","size","type","GroupFont","Font","instance","axios","create","baseURL","id","HeaderStyle","attrConst","Originalkey","newKey","Header","templateName","setTemplateName","setImageBase64","setError","setLayout","layout","version","items","isDirty","isTemplateNew","isNewVersion","handleOnLoad","handleAddNewVersion","handleCreateNewTemplate","handlePresistance","uploadLayout","setUploadLayout","name","attrs","setAttrs","applyAttribute","ParentId","Stroke","StrokeWidth","toString","ApplyCoordinate","_","isEmpty","cellSub","objectKeysToFirstCapital","origObj","reduce","newObj","key","val","newVal","string","charAt","toUpperCase","jsUcfirst","cleanEmpty","obj","v","filter","entries","k","objectKeysToFirstLower","toLowerCase","parentId","navigationKey","getXMLfromObject","settings","x2js","X2JS","attributePrefix","xmlObj","js2xml","handleFileSave","cellData","page","Setting","Page","blob","Blob","FileSaver","saveAs","handleFiles","file","fileTypes","ripple","decodedString","jsonObj","xml2js","newItems","Settings","CellData","l","Version","handleUploadTemplate","onPress","TreeStyle","Tree","treeData","treeOpenNodes","handleAddItemToTreeNode","handleAddContainerToTreeNode","handleTreeViewClick","handleDeleteItemfromTree","hasSearch","onClickItem","activeKey","openNodes","search","resetOpenNodes","className","props","ErrorStyle","SectionStyle","DetailStyle","PropertiesStyle","Error","children","Section","Detail","Properties","Designer","setIsDirty","setIsTemplateNew","setIsNewVersion","setVersion","error","Layouts","template","setTemplate","setItems","setTreeData","setTreeOpenNodes","Base64","find","GetNewLayout","Name","handleIsDirty","applyLineGraphics","convertToTreeDate","isDirtyLayout","isEqual","isDirtyItems","RemPage","Type","Index","TemplateId","nodes","GetTreeDataSub","NodeName","updateProperty","GetNewShape","pId","pNavigationKey","pSubData","getRandomInt","LastPageOnly","Alignment","DisplayText","Size","Formatting","Weight","Format","rotateAngle","Text","Prefix","Midfix","Postfix","min","ceil","random","Template","then","response","layouts","maxVersion","o","currentLayout","catch","status","request","t","Layout","newShape","shapeItems","shapeItem","sub","splice","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"kMAAe,I,+FC8EAA,EA1EG,SAAC,GAAoD,IAAlDC,EAAiD,EAAjDA,WAAYC,EAAqC,EAArCA,WAAYC,EAAyB,EAAzBA,SAAUC,EAAe,EAAfA,SAC/CC,EAAWC,IAAMC,SACjBC,EAAQF,IAAMC,SAYpB,OAVAD,IAAMG,WAAU,WACVP,IACAQ,QAAQC,IAAI,cAGdH,EAAMI,QAAQC,SAAS,CAACR,EAASO,UACjCJ,EAAMI,QAAQE,WAAWC,eAE1B,CAACb,IAGF,eAAC,IAAMc,SAAP,WACE,cAAC,OAAD,yBACEC,QAASd,EACTe,MAAOf,EACPgB,IAAKd,GACDJ,GAJN,IAKEmB,WAAS,EACTC,UAAW,SAAAC,GACTZ,QAAQC,IAAI,aAAgBW,EAAEC,OAAOC,IAAM,IAAOF,EAAEC,OAAOE,IAAM,IAAMH,EAAEC,OAAOG,QAAU,IAAMJ,EAAEC,OAAOI,UACxGvB,EAAS,2BACLH,GADI,IAEP2B,EAAGC,KAAKC,IAAKD,KAAKE,MAAMT,EAAEC,OAAOC,MACjCQ,EAAGH,KAAKC,IAAKD,KAAKE,MAAMT,EAAEC,OAAOE,MACjCQ,MAAOJ,KAAKC,IAAID,KAAKE,MAAMT,EAAEC,OAAOG,UACpCQ,OAAQL,KAAKC,IAAID,KAAKE,MAAMT,EAAEC,OAAOI,WACrCQ,SAAUb,EAAEC,OAAOY,cAErBzB,QAAQC,IAAI,aAAgBkB,KAAKC,IAAKD,KAAKE,MAAMT,EAAEC,OAAOC,MAAQ,IAAOK,KAAKC,IAAKD,KAAKE,MAAMT,EAAEC,OAAOE,MAAO,IAAMH,EAAEC,OAAOG,QAAU,IAAMJ,EAAEC,OAAOI,WAExJS,eAAgB,SAAAd,GAKdZ,QAAQC,IAAI,aACZ,IAAM0B,EAAOhC,EAASO,QAChB0B,EAASD,EAAKC,SACdC,EAASF,EAAKE,SAGpBF,EAAKC,OAAO,GACZD,EAAKE,OAAO,GACXnC,EAAS,2BACLH,GADI,IAEP2B,EAAGC,KAAKC,IAAID,KAAKE,MAAMM,EAAKb,MAC5BQ,EAAGH,KAAKC,IAAID,KAAKE,MAAMM,EAAKZ,MAE5BQ,MAAOJ,KAAKE,MAAMF,KAAKW,IAAI,EAAGH,EAAKX,QAAUY,IAC7CJ,OAAQL,KAAKE,MAAMF,KAAKW,IAAIH,EAAKV,SAAWY,IAC5CJ,SAAUE,EAAKF,kBAIpBjC,GACC,cAAC,cAAD,CACEiB,IAAKX,EACLiC,aAAc,SAACC,EAAQC,GAErB,OAAIA,EAAOV,MAAQ,GAAKU,EAAOT,OAAS,EAC/BQ,EAEFC,S,wHC7DZ,IAAMC,EAAcC,IAAOC,IAAV,KAyNTC,EArNA,SAAC,GAAgF,IAA/EC,EAA8E,EAA9EA,WAAYC,EAAkE,EAAlEA,cAAeC,EAAmD,EAAnDA,cAAeC,EAAoC,EAApCA,iBAAkBC,EAAkB,EAAlBA,YACrEC,EAAW/C,IAAMC,SADsE,EAGhE+C,mBAAS,MAHuD,mBAGtFC,EAHsF,KAG/EC,EAH+E,OAItDF,mBAASG,OAAOC,YAJsC,mBAItFC,EAJsF,KAI1EC,EAJ0E,OAKpDN,mBAASG,OAAOI,aALoC,mBAKtFC,EALsF,KAKzEC,EALyE,KAO7FtD,qBAAU,WACRuD,EAAsBZ,KACtB,CAACA,IAEH,IAAMY,EAAqB,uCAAI,WAAMZ,GAAN,mCAAAa,EAAA,sDAC7B,GAAoB,KAAhBb,QAAuCc,IAAhBd,EAEzB,GADA1C,QAAQC,IAAI,aACRyC,EAAYe,SAAS,QACvB,IAgBA,IAfIC,EAAIC,EAAqBjB,GACvBkB,EAAOC,IAAKC,OAAOJ,GACnBK,EAAiBH,EAAK,GAC5BC,IAAKG,YAAYN,EAAGE,EAAK,IACnBK,EAAOJ,IAAKK,QAAQH,GAEpBd,EAAac,EAAe/C,MAC5BoC,EAAcW,EAAe9C,QAE7BkD,EAAMC,SAASC,cAAc,WAC/BrD,MAAQiC,EACZkB,EAAIlD,OAASmC,EAEPkB,EAAMH,EAAII,WAAW,MACrBC,EAAYF,EAAIG,gBAAgBxB,EAAYG,GACzCsB,EAAI,EAAGA,EAAIT,EAAKU,OAAQD,IAC/BF,EAAUI,KAAKF,GAAKT,EAAKS,GAE3BJ,EAAIO,aAAaL,EAAW,EAAG,GAE/B1B,EAAYqB,GACZjB,EAAiBD,GACjBI,EAAkBD,GAGnB,MAAM0B,GACH9E,QAAQC,IAAI6E,QAKVC,EAAM,IAAIhC,OAAOiC,OACjBC,OAAS,WACXjF,QAAQC,IAAI,UACZD,QAAQC,IAAI8E,EAAI/D,MAAQ,QAAU+D,EAAI9D,QACrCiC,EAAiB6B,EAAI/D,OACrBqC,EAAkB0B,EAAI9D,QACtB6B,EAAYiC,IAEfA,EAAIG,QAAU,SAAStE,GACrBZ,QAAQC,IAAI,UAEd8E,EAAII,IAAMzC,OAGVQ,EAAiBH,OAAOC,YACxBK,EAAkBN,OAAOI,aACzBL,EAAY,MApDa,2CAAJ,sDAwDlBsC,EAAgB,WAgB3B,SAASzB,EAAqB0B,GAC5B,IAAIC,EAAcD,EAAQE,QAAQH,GAAiBA,EAAcT,OAC7Da,EAASH,EAAQI,UAAUH,GAC/B,OAAOI,WAAWC,KAAKC,KAAKJ,IAAS,SAAAK,GAAC,OAAIA,EAAEC,WAAW,MAGvD,IAAMC,EAAgB,SAAAnF,GAEpBZ,QAAQC,IAAIW,EAAEC,OAAS,OAAS8B,EAASzC,SAClBU,EAAEC,SAAW8B,EAASzC,SAE3CuC,EAAiB,OAwBfuD,EAAe,SAACC,GAGpB,OAFAjG,QAAQC,IAAI,iBACZD,QAAQC,IAAIuC,QACIgB,IAATyC,GACL,cAAC,EAAD,CAEE1G,WAAY0G,EAEZzG,WAAYyG,EAAKC,MAAL,OAAY1D,QAAZ,IAAYA,OAAZ,EAAYA,EAAe0D,IACvCzG,SAAU,WACRO,QAAQC,IAAI,QACZD,QAAQC,IAAIgG,GACZxD,EAAiBwD,IAGnBvG,SAAU,SAAAyG,GACRA,EAASC,WAAa,CACpBC,GAAgB,EAAbF,EAASjF,EACZoF,GAAgB,EAAbH,EAAS7E,EACZiF,GAAgB,EAAbJ,EAASjF,EAAyB,EAAjBiF,EAAS5E,MAC7BiF,GAAgB,EAAbL,EAAS7E,EAA0B,EAAlB6E,EAAS3E,QAI/B,IAAMiF,EAAQnE,EAAWoE,QAEnBC,EAAOV,EAAKW,cAAcC,MAAM,KAChCC,EAASH,EAAKhC,OAAS,EAE7B,GAAe,IAAXmC,EAAa,CACf,IAAIC,EAAQN,EAAMO,WAAW,qBAAGd,KAA0B,EAAVS,EAAK,MACjDI,GAAS,IACXN,EAAMM,GAAUZ,GAKlB,GAAe,IAAXW,EAAa,CACb,IAAIC,EAAQN,EAAMO,WAAW,qBAAGd,KAA0B,EAAVS,EAAK,MACjDI,GAAS,IACXN,EAAMM,GAAOE,QAAUd,GAI7B,GAAe,IAAXW,EAAa,CACb,IAAII,EAAST,EAAMO,WAAW,qBAAGd,KAA0B,EAAVS,EAAK,MACtD,GAAIO,GAAU,EAAG,CACb,IAAIC,EAASV,EAAMS,GAAQD,QAAQA,QAAQD,WAAW,qBAAGd,KAA0B,EAAVS,EAAK,MAC1EO,GAAU,IACZT,EAAMS,GAAQD,QAAQA,QAAQE,GAAUhB,IASpDnG,QAAQC,IAAI,mBACZD,QAAQC,IAAIkG,EAASjF,EAAI,IAAOiF,EAAS7E,EAAI,IAAM6E,EAAS5E,MAAQ,IAAM4E,EAAS3E,QAEnFxB,QAAQC,IAAIkG,GACZ5D,EAAckE,GACdhE,EAAiB0D,KA1DdF,EAAKC,KAiEhB,OACE,cAAChE,EAAD,UACA,cAAC,QAAD,CACAlB,MAAOiC,EAAW,EAClBhC,OAAQmC,EAAY,EACpBxB,OAAQ,GACRC,OAAQ,GACNuF,YAAarB,EACbsB,aAActB,EANhB,SAQE,eAAC,QAAD,WACA,cAAC,QAAD,CAAOlD,MAAOA,EAAOpC,IAAKkC,EACxB3B,MAAOiC,EAAYhC,OAAQmC,EAC3BkE,OAAS,MAAOC,YAAc,GAC7BzG,EAAG,EAAGC,EAAG,IAEXuB,GA1Ge,SAACkF,GAErB,IAAIC,EAAS,GAeb,OAdAzH,QAAQC,IAAI,gBAGVuH,EAAME,KAAI,SAACC,GACTF,EAAOG,KAAK5B,EAAa2B,IACJ,OAAjBA,EAAKV,cAAqCzD,IAAjBmE,EAAKV,UAChCQ,EAAOG,KAAK5B,EAAa2B,EAAKV,WAC7BY,MAAMC,QAAQH,EAAKV,QAAQA,SAC1BU,EAAKV,QAAQA,QAAUc,OAAOC,OAAOL,EAAKV,QAAQA,UACnCS,KAAI,SAACO,GACFR,EAAOG,KAAK5B,EAAaiC,WAI5CR,EA0FDS,CAAa5F,W,0JCnNd,IAAM6F,EAAYhG,IAAOC,IAAV,KAgGPgG,EA3FW,SAAC,GAAsB,IAArBC,EAAoB,EAApBA,KAAM3I,EAAc,EAAdA,SAE1B4I,EAAkB,SAACC,EAAMC,GAA6B,IAAtBC,EAAqB,uDAAP,GAC9CC,EAAQL,GAAQA,EAAKjC,YAAciC,EAAKjC,WAAWmC,GAEnD,MADoB,KAAhBE,IAAoBA,EAAcD,GAGlC,eAACG,EAAA,EAAKC,MAAN,CAAYC,GAAIC,IAAKC,UAAWR,EAAhC,UACKvI,QAAQC,IAAI,eACZD,QAAQC,IAAIoI,GACf,cAACM,EAAA,EAAKK,MAAN,CAAYC,OAAO,KAAKC,GAAI,EAA5B,SACCV,IAED,cAACW,EAAA,EAAD,CAAKC,GAAI,GAAT,SACE,cAACT,EAAA,EAAKU,QAAN,CAAcC,KAAK,KAAKC,KAAK,OAC7Bd,YAAaA,EACbC,MAAK,OAAEA,QAAF,IAAEA,IAAQ,GACfhJ,SAAU,SAACkB,GAAD,OAAOlB,EAAS6I,EAAM3H,EAAEC,OAAO6H,gBAMnDc,EAAY,SAACjB,EAAMC,GAA6B,IAAtBC,EAAqB,uDAAP,GACxCC,EAAQL,GAAQA,EAAKoB,MAAQpB,EAAKoB,KAAKlB,GAGvC,MADgB,KAAhBE,IAAoBA,EAAcD,GAE9B,eAACG,EAAA,EAAKC,MAAN,CAAYC,GAAIC,IAAKC,UAAWR,EAAhC,UACE,cAACI,EAAA,EAAKK,MAAN,CAAYC,OAAO,KAAKC,GAAI,EAA5B,SACCV,IAED,cAACW,EAAA,EAAD,CAAKC,GAAI,GAAT,SACE,cAACT,EAAA,EAAKU,QAAN,CAAcC,KAAK,KAAKC,KAAK,OAC7Bd,YAAaA,EACbC,MAAK,OAAEA,QAAF,IAAEA,IAAQ,GACfhJ,SAAU,SAACkB,GAAD,OAAOlB,EAAS6I,EAAM3H,EAAEC,OAAO6H,gBAM7CE,EAAQ,SAACL,EAAMC,GAA6B,IAAtBC,EAAqB,uDAAP,GACpCC,EAAQL,GAAQA,EAAKE,GAEnB,MADgB,KAAhBE,IAAoBA,EAAcD,GAE9B,eAACG,EAAA,EAAKC,MAAN,CAAYC,GAAIC,IAAKC,UAAWR,EAAhC,UACE,cAACI,EAAA,EAAKK,MAAN,CAAYC,OAAO,KAAKC,GAAI,EAA5B,SACCV,IAED,cAACW,EAAA,EAAD,CAAKC,GAAI,GAAT,SACE,cAACT,EAAA,EAAKU,QAAN,CAAcC,KAAK,KAAKC,KAAK,OAC7Bd,YAAaA,EACbC,MAAK,OAAEA,QAAF,IAAEA,IAAQ,GACfhJ,SAAU,SAACkB,GAAD,OAAOlB,EAAS6I,EAAM3H,EAAEC,OAAO6H,gBAM3D,OAEU,cAACC,EAAA,EAAD,UACI,eAACR,EAAD,WAEKS,EAAM,KAAM,MACZA,EAAM,WAAY,aAClBA,EAAM,cAAe,eAErBN,EAAgB,KAAM,KAAK,iBAC3BA,EAAgB,KAAM,KAAK,iBAC3BA,EAAgB,KAAM,KAAK,iBAC3BA,EAAgB,KAAM,KAAK,iBAE3BkB,EAAU,OAAQ,aAClBA,EAAU,OAAQ,aAElBZ,EAAM,QAAS,SACfA,EAAM,SAAU,UAChBA,EAAM,IAAK,KACXA,EAAM,IAAK,KAEXA,EAAM,WAAY,SAClBA,EAAM,YAAa,aACnBA,EAAM,cAAe,qB,ssBC5FnBzG,IAAOC,IAAV,KAQID,IAAOC,IAAV,KAUFD,IAAOC,IAAV,KAlBT,I,oECFDsH,EAAWC,IAAMC,OAAO,CAC1BC,QAAS,4BAEE,EAWW,SAACC,GAAD,OACtBJ,EAAS,CACL,OAAS,MACT,IAAM,+BAAiCI,KAdhC,EAgBD,SAAClF,GAAD,OACV8E,EAAS,CACL,OAAU,OACV,IAAM,iBACN,KAAO9E,KCvBT8E,EAAWC,IAAMC,OAAO,CAC1BC,QAAS,4BAEE,EAWD,SAACjF,GAAD,OACV8E,EAAS,CACL,OAAU,OACV,IAAM,eACN,KAAO9E,K,shBCTczC,IAAOC,IAAV,KAAnB,IA4BM2H,EAAc5H,IAAOC,IAAV,KASlB4H,EAAW,CAAG,CAACC,YAAa,cAAeC,OAAQ,cACrC,CAACD,YAAa,YAAaC,OAAQ,YACnC,CAACD,YAAa,aAAcC,OAAQ,aACpC,CAACD,YAAa,YAAaC,OAAQ,YACnC,CAACD,YAAa,QAASC,OAAQ,QAC/B,CAACD,YAAa,gBAAiBC,OAAQ,gBACvC,CAACD,YAAa,WAAYC,OAAQ,WAClC,CAACD,YAAa,uBAAwBC,OAAQ,uBAC9C,CAACD,YAAa,+BAAgCC,OAAQ,+BACtD,CAACD,YAAa,iBAAkBC,OAAQ,iBACxC,CAACD,YAAa,WAAYC,OAAQ,YA2bvCC,EAzbA,SAAC,GAKO,IALNC,EAKK,EALLA,aAAcC,EAKT,EALSA,gBACJC,GAIL,EAJLC,SAIK,EAJKD,gBAAgBE,EAIrB,EAJqBA,UAChBC,GAGL,EAHJC,QAGI,EAHKD,QAAQE,EAGb,EAHaA,MACJC,GAET,EAFNC,cAEM,EAFSD,SAET,KAFkBE,aAElB,EADNC,aACM,EADQC,oBACR,EAD6BC,wBAC7B,EADqDC,kBAEpCtI,mBAAS,KAD1B,gCAEsBA,mBAAS,KAF/B,mBAEXuI,EAFW,KAEGC,EAFH,OAGOxI,mBAASwH,GAHhB,mBAGXiB,EAHW,aAIQzI,mBAASoH,IAJjB,mBAIXsB,EAJW,KAIJC,EAJI,KAKD3L,IAAMC,SAWvBE,qBAAU,WACNsK,EAAgBgB,KAChB,CAACA,IAEJtL,qBAAU,WACPyK,EAAUW,KACV,CAACA,IAEJpL,qBAAU,WACPC,QAAQC,IAAIqL,KACZ,CAACA,IAEL,IAoBQlG,EAAgB,WAiChBoG,EAAiB,SAACb,GACtB,IAAIb,EAAK,EAmCR,OAlCc/B,OAAOC,OAAO2C,GAAOjD,KAAI,SAACC,GAOtC,GANAA,EAAKzB,GAAK4D,IACVnC,EAAK8D,SAAW,EAChB9D,EAAK+D,OAAS,MACd/D,EAAKgE,YAAc,EACnBhE,EAAKf,cAAgBe,EAAKzB,GAAG0F,WAC7BC,EAAgBlE,QACKnE,IAAjBmE,EAAKV,SAA0C,OAAjBU,EAAKV,UAAsB6E,IAAEC,QAAQpE,EAAKV,SAAW,CACnF,IAAIA,EAAUU,EAAKV,QACnBA,EAAQf,GAAK4D,IACb7C,EAAQwE,SAAW9D,EAAKzB,GACxBe,EAAQyE,OAAS,SACjBzE,EAAQ0E,YAAc,EACtB1E,EAAQL,cAAgBe,EAAKf,cAAcgF,WAAa,IAAM3E,EAAQf,GAAG0F,WACzE3E,EAAQb,WAAWE,GAAKqB,EAAKvB,WAAWE,GACxCW,EAAQb,WAAWI,GAAKmB,EAAKvB,WAAWI,GACxCqF,EAAgB5E,QACazD,IAAzBmE,EAAKV,QAAQA,SAAkD,OAAzBU,EAAKV,QAAQA,SAAsB6E,IAAEC,QAAQpE,EAAKV,QAAQA,UAClGc,OAAOC,OAAOL,EAAKV,QAAQA,SAASS,KAAI,SAACsE,GASnC,OARFA,EAAQ9F,GAAK4D,IACbkC,EAAQP,SAAWxE,EAAQf,GAC3B8F,EAAQN,OAAS,QACjBM,EAAQL,YAAc,EACtBK,EAAQpF,cAAgBK,EAAQL,cAAcgF,WAAa,IAAMI,EAAQ9F,GAAG0F,WAC5EI,EAAQ5F,WAAWE,GAAKqB,EAAKV,QAAQb,WAAWE,GAChD0F,EAAQ5F,WAAWI,GAAKmB,EAAKV,QAAQb,WAAWI,GAChDqF,EAAgBG,GACPrE,KAGfA,EAAKV,QAAL,OAAeA,QAAf,IAAeA,IAAU,KAE7B,OAAOU,MAKRkE,EAAkB,SAAClE,GACrBA,EAAKzG,EAAIC,KAAKC,IAAyB,EAArBuG,EAAKvB,WAAWC,IAClCsB,EAAKrG,EAAIH,KAAKC,IAAyB,EAArBuG,EAAKvB,WAAWE,IAClCqB,EAAKpG,MAASJ,KAAKC,IAA4B,EAAxBuG,EAAKvB,WAAL,GAAoD,EAAxBuB,EAAKvB,WAAL,IACnDuB,EAAKnG,OAASL,KAAKC,IAA4B,EAAxBuG,EAAKvB,WAAL,GAAoD,EAAxBuB,EAAKvB,WAAL,KAGjD6F,EAA2B,SAA3BA,EAAqCC,GACvC,OAAOnE,OAAOpB,KAAKuF,GAASC,QAAO,SAAUC,EAAQC,GACjD,IAAIC,EAAMJ,EAAQG,GAEfE,EAAyB,kBAARD,EACrBzE,MAAMC,QAAQwE,GAAOvE,OAAOC,OAAOiE,EAAyBK,IAAQL,EAAyBK,GAC3FA,EACW,gBAARD,IAAuBA,EAAM,cACjC,IAAInC,EAiBR,SAAmBsC,IAEc,IAAzBA,EAAOjH,QAAQ,OACfiH,EAASA,EAAO9F,MAAM,IAC1B,OAAO8F,EAAOC,OAAO,GAAGC,cAAgBF,EAAO9F,MAAM,GArBxCiG,CAAUN,GAcvB,OAZArM,QAAQC,IAAIoM,EAAI9G,QAAQ,OACE,IAAtB8G,EAAI9G,QAAQ,OAEwD,IAAhE+F,EAAMtE,WAAW,qBAAGiD,cAAkCoC,OAGvDf,EAAM1D,KAAK,CAACqC,YAAcoC,EAAKnC,OAASA,IACvCqB,EAASD,IAGjBtL,QAAQC,IAAIqL,GACZc,EAAOlC,GAAUqC,EACVH,IACR,KASH,IAAMQ,EAAa,SAAbA,EAAaC,GACf,OAAIhF,MAAMC,QAAQ+E,GACTA,EACFnF,KAAI,SAAAoF,GAAC,OAAKA,GAAkB,kBAANA,EAAkBF,EAAWE,GAAKA,KACxDC,QAAO,SAAAD,GAAC,QAAW,MAALA,MAEZ/E,OAAOiF,QAAQH,GACjBnF,KAAI,mCAAEuF,EAAF,KAAKH,EAAL,WAAY,CAACG,EAAGH,GAAkB,kBAANA,EAAiBF,EAAWE,GAAKA,MACjEX,QAAO,SAAC5I,EAAD,0BAAK0J,EAAL,KAAQH,EAAR,YAAqB,MAALA,IAAiBvJ,EAAE0J,GAAGH,GAAVvJ,IAAkB,KAI9D2J,EAAyB,SAAzBA,EAAmChB,GACrC,IA4BqBY,EA5BjBD,EAAO9E,OAAOpB,KAAKuF,GAASC,QAAO,SAAUC,EAAQC,GACrD,IAAIC,EAAMJ,EAAQG,GAClB,GAAW,OAARC,EAAH,CACA,IAAIC,EAAyB,kBAARD,EACrBzE,MAAMC,QAAQwE,GAAOvE,OAAOC,OAAOkF,EAAuBZ,IAAQY,EAAuBZ,GACvFA,EACU,eAARD,IAAsBA,EAAM,eAChC,IAceG,EAdXtC,GAcWsC,EAdQH,GAkBTI,OAAO,GAAGU,cAAgBX,EAAO9F,MAAM,GAVrD,OAN0D,IAAtD4E,EAAMtE,WAAW,qBAAGkD,SAAwBmC,OAC5CnC,EAAS,IAAMA,GAGnBlK,QAAQC,IAAIqL,GACZc,EAAOlC,GAAUqC,EACVH,KACR,IAGH,cASqBU,EAVSD,GAWb/C,UACFgD,EAAEM,gBACFN,EAAExF,cACFwF,EAAEvF,mBACFuF,EAAE9L,aACF8L,EAAE7L,cACF6L,EAAEhM,SACFgM,EAAE/L,SACF+L,EAAEO,cAEFP,GAGf,IAAMQ,EAAmB,SAACC,GAEtB,IAAIC,EAAO,IAAIC,IAAK,CAChBC,gBAAkB,MAGlB5M,EAAIoM,EAAuBK,GAE3BI,EAASH,EAAKI,OAAQ9M,GAG1B,OAFAd,QAAQC,IAAI0N,GAELA,GAsDPE,EAAiB,WAAO,IAAD,EACvBN,EAAW,CACXA,SAAW,CACPO,SAAQ,YAAQnD,GAChBoD,KAAI,UAAGtD,EAAOuD,QAAQC,YAAlB,QAAyB,CAAC/M,EAAE,EAAEI,EAAE,KAGxCqM,EAASL,EAAiBV,EAAWW,IAErCW,EAAO,IAAIC,KAAK,CAACR,GAAS,CAACpE,KAAM,4BACrC6E,IAAUC,OAAOH,EAAM,iBAQ3B,OACI,cAAC,IAAM5N,SAAP,UACS,eAACyJ,EAAD,WACD,0CAwBA,cAAC,IAAD,CAAiBvE,QAAQ,EAAM8I,YAAc,SAACC,GAAD,OAAUjE,EAAeiE,EAAK/I,SAASgJ,UAAW,CAAC,QAAhG,SACI,cAAC,gBAAD,CACAjF,KAAK,UACLkF,QAAM,EAFN,4BASJ,cAAC,IAAD,CAAiBjJ,QAAQ,EAAM8I,YAAc,SAACC,GAAD,OA5R1B,SAACA,GAAU,IAAD,IACjCjJ,EAAciJ,EAAK/I,OAAOD,QAAQH,GAAiBA,EAAcT,OACjEa,EAAS+I,EAAK/I,OAAOC,UAAUH,GAE/BoJ,GADMH,EAAK/I,OACKI,KAAKJ,IACzBxF,QAAQC,IAAIyO,GACZ,IAGIC,EAHO,IAAIlB,IAAK,CAChBC,gBAAkB,MAEHkB,OAAQF,GAC3B1O,QAAQC,IAAI0O,GAEZ,IAAIvC,EAASH,EAAyB0C,GAEtC3O,QAAQC,IAAIqL,GAEZ,IAAIuD,EAAWrD,EAAc,iBAACY,QAAD,IAACA,GAAD,UAACA,EAAQ0C,gBAAT,aAAC,EAAkBC,gBAAnB,QAA8B,IAC3D3C,EAAO0C,SAASC,SAAWF,EAE3B,IAAIG,EAAI,CACJhB,QAAU,CACNe,SAAWF,EACXZ,KAAO7B,EAAO0C,SAASb,MAE3BgB,QAAU,GAEdjP,QAAQC,IAAI+O,GAEZ5D,EAAgB4D,GAgQ+CE,CAAqBX,IAAOC,UAAW,CAAC,QAA/F,SACI,cAAC,gBAAD,CACAjF,KAAK,UACLkF,QAAM,EAFN,+BAqFH7D,GACD,cAAC,gBAAD,CACIrB,KAAK,UACLkF,QAAM,EACNU,QAAS,WACLtB,KAJR,8B,ibC9dT,IAAMuB,GAAYjN,IAAOC,IAAV,MA8FPiN,GAtEF,SAAC,GAE0C,IAAD,EAFxCC,EAEwC,EAFxCA,SAAU9M,EAE8B,EAF9BA,cAAe+M,EAEe,EAFfA,cACpCC,EACmD,EADnDA,wBAAyBC,EAC0B,EAD1BA,6BACzBC,EAAmD,EAAnDA,oBAAqBC,EAA8B,EAA9BA,yBAGrB,OACI,cAACP,GAAD,UACA,cAAC,KAAD,CAAUxK,KAAM0K,EAAUM,WAAW,EACrCC,YAAa,YAA+B,IAA5BxD,EAA2B,EAA3BA,IAA2B,EAAtB7D,MAAsB,+BACxCkH,EAAoBrD,IAEzByD,UAAS,iBAAEtN,QAAF,IAAEA,OAAF,EAAEA,EAAeoE,qBAAjB,QAAkC,GAC3CmJ,UAAWR,EALT,SAOC,gBAAGS,EAAH,EAAGA,OAAQrF,EAAX,EAAWA,MAAOsF,EAAlB,EAAkBA,eAAlB,OACG,qCACA,cAAC,gBAAD,CACA1G,KAAK,UACLkF,QAAM,EACNU,QAAS,WACLK,KAJJ,sBASJ,cAAC,gBAAD,CACIjG,KAAK,UACLkF,QAAM,EACNU,QAAS,WACLM,KAJR,2BASA,cAAC,gBAAD,CACIlG,KAAK,UACLkF,QAAM,EACNU,QAASc,EAHb,mBAOA,uBAAOvQ,SAAU,SAAAkB,GAAC,OAAIoP,EAAOpP,EAAEC,OAAO6H,QAAQD,YAAY,oBACtD,oBAAIyH,UAAU,KAAd,SACKvF,EAAMjD,KAAI,gBAAE2E,EAAF,EAAEA,IAAQ8D,EAAV,8BACX,uBAAgBD,UAAU,KAA1B,UACI,cAAC,KAAD,eAA6BC,GAAT9D,GAEpB,cAAC,gBAAD,CACAvC,GAAMuC,EACF9C,KAAK,UACLkF,QAAM,EACNU,QAAS,WACLnP,QAAQC,IAAI,KACZD,QAAQC,IAAIoM,GACZsD,EAAyBtD,IAPjC,iBAHOA,iB,kzBCzDpB,IAAM+D,GAAajO,IAAOC,IAAV,MAIV+F,GAAYhG,IAAOC,IAAV,MAaTiO,IATclO,IAAOC,IAAV,MASID,IAAOC,IAAV,OAIZkO,GAAcnO,IAAOC,IAAV,MAMXmO,GAAkBpO,IAAOC,IAAV,MAMtBoO,GAAQ,SAAC,GAAgB,IAAfC,EAAc,EAAdA,SACZ,OAAQ,cAACL,GAAD,UAAaK,KAGnBC,GAAU,SAAC,GAAgB,IAAfD,EAAc,EAAdA,SACd,OAAQ,cAACJ,GAAD,UAAeI,KAGrBE,GAAS,SAAC,GAAgB,IAAfF,EAAc,EAAdA,SACb,OAAQ,cAACH,GAAD,UAAcG,KAGpBG,GAAa,SAAC,GAAgB,IAAfH,EAAc,EAAdA,SACjB,OAAQ,cAACF,GAAD,UAAkBE,KAqhBfI,GAlhBE,WAAM,MAGWjO,oBAAS,GAHpB,mBAGZgI,EAHY,KAGHkG,EAHG,OAIuBlO,oBAAS,GAJhC,mBAIZiI,EAJY,KAIGkG,EAJH,OAKqBnO,oBAAS,GAL9B,mBAKZkI,EALY,KAKEkG,EALF,OAMWpO,mBAAS,MANpB,mBAMZ8H,EANY,KAMHuG,EANG,OAOOrO,mBAAS,IAPhB,mBAOZsO,EAPY,KAOL3G,EAPK,OAQa3H,mBAAS,CAACsD,IAAK,EAAGiL,QAAU,CAAC,CAACnD,QAAU,CAAEe,SAAW,QARlE,mBAQZqC,EARY,KAQFC,EARE,OASqBzO,mBAAS,IAT9B,mBASZwH,EATY,KASEC,EATF,OAUSzH,mBAAS,CAACoL,QAAU,CAAEe,SAAW,MAV1C,mBAUZtE,EAVY,KAUJD,EAVI,OAWO5H,mBAAS,IAXhB,mBAWZ+H,EAXY,KAWL2G,EAXK,OAYa1O,mBAAS,IAZtB,mBAYZ0M,EAZY,KAYFiC,EAZE,OAauB3O,mBAAS,CAAC,KAbjC,oBAaZ2M,GAbY,MAaGiC,GAbH,SAcuB5O,mBAAS,MAdhC,qBAcZJ,GAdY,MAcGC,GAdH,SAemBG,mBAAS,IAf5B,qBAeZF,GAfY,MAeC4H,GAfD,MAiBnBvK,qBAAU,WACNC,QAAQC,IAAIiR,KAEZ,CAACA,IAELnR,qBAAU,WAAO,IAAD,MACbuK,GAAe8G,EAASK,QACxBjH,EAAS,oBAAC4G,EAASD,eAAV,aAAC,EAAkBO,MAAK,SAAA9Q,GAAC,OAAI,YAA7B,QAAqC+Q,MAC9CtH,EAAgB+G,EAASQ,MACzBb,EAAuC,KAAtB,UAACK,EAASlL,UAAV,QAAe,IAChC2L,OAEA,CAACT,IAEJrR,qBAAU,WAAO,IAAD,IACZuR,EAASQ,GAAiB,oBAACrH,EAAOuD,eAAR,aAAC,EAAgBe,gBAAjB,QAA4B,KACtDkC,EAAWxG,EAAOwE,WAClB,CAACxE,IAEL1K,qBAAU,WACNwR,EAAYQ,GAAkBpH,IACV,GAAhBA,EAAMhG,QAAalC,GAAiB,MACxCoP,OACA,CAAClH,IAEL5K,qBAAU,WAAO,IAAD,EAEZ,IADmB,iBAACyC,SAAD,IAACA,QAAD,EAACA,GAAeoE,qBAAhB,QAAgC,IAAIrB,QAAQ,KAC5C,EACfiM,QAAiBhO,OAErB,CAAC,IAAD,EACQuM,EAAS,iBAAGvN,SAAH,IAAGA,QAAH,EAAGA,GAAeoE,qBAAlB,aAAmCpD,EAG9CgO,GAAiBzB,MAEvB,CAACvN,KAEJ,IAAMqP,GAAgB,WAAM,IAAD,YAIpBG,GAAiBlG,IAAEmG,QAAF,oBAAUb,EAASD,eAAnB,aAAU,EAAkBO,MAAK,SAAA9Q,GAAC,OAAI,YAAtC,QAA8C+Q,KAAgBlH,GAC/EyH,GAAgBpG,IAAEmG,QAAF,oBAAUb,EAASD,eAAnB,iBAAU,EAAkBO,MAAK,SAAA9Q,GAAC,OAAI,YAAtC,iBAAU,EAAmCoN,eAA7C,aAAU,EAA4Ce,gBAAtD,QAAkE,GAAIpE,GAE1FmG,KAAYkB,IAAgBE,KAczBP,GAAe,WACjB,MAAO,CACJzL,GAAI,EACJ8H,QAAS,CAACe,SAAU,GAAId,KAAM,GAAIkE,QAAS,KAAMC,KAAM,KAAMC,MAAO,GACpEC,WAAY,EACZrD,QAAS,IAIb8C,GAAoB,SAACpH,GACvB,IAAI4H,EAAQ,GA6Bd,OA3BA5H,EAAMjD,KAAI,SAACC,GACP,GAAIA,EAAKV,QAAQ,CAEgB,OAAzBU,EAAKV,QAAQA,SAAoBY,MAAMC,QAAQH,EAAKV,QAAQA,UACjDuL,GAAe7K,EAAKV,QAAQA,SAE3CsL,EAAM3K,KACF,CACIyE,IAAM1E,EAAKzB,GACXsC,MAAQb,EAAK8K,SACbF,MAAQ,CACI,CACIlG,IAAM1E,EAAKV,QAAQf,GAAG0F,WACtBpD,MAAQb,EAAKV,QAAQwL,SACrBF,MAAQC,GAAe7K,EAAKV,QAAQA,kBAO7DsL,EAAM3K,KAAK,CAACyE,IAAM1E,EAAKzB,GAAG0F,WAAapD,MAAQb,EAAK8K,SAAUF,MAAQ,KAEzEvS,QAAQC,IAAI,SACZD,QAAQC,IAAIsS,MAGTA,GAGHC,GAAiB,SAAC7K,GAEtB,IAAI4K,EAAQ,GAKR,OAJH1K,MAAMC,QAAQH,GAAOA,EAAOI,OAAOC,OAAOL,IAC1CD,KAAI,SAACC,GACE4K,EAAM3K,KAAK,CAACyE,IAAM1E,EAAKzB,GAAG0F,WAAYpD,MAAQb,EAAK8K,SAAUF,MAAQ,QAElEA,GAGLT,GAAoB,SAACnH,GAoBzB,OAnBEA,EAAMjD,KAAI,SAACC,GACPA,EAAK+D,OAAS,MACd/D,EAAKgE,YAAc,OACEnI,IAAjBmE,EAAKV,SAA0C,OAAjBU,EAAKV,UACnCU,EAAKV,QAAQyE,OAAS,SACtB/D,EAAKV,QAAQ0E,YAAc,OACEnI,IAAzBmE,EAAKV,QAAQA,SAAkD,OAAzBU,EAAKV,QAAQA,UAClDY,MAAMC,QAAQH,EAAKV,QAAQA,SACxBU,EAAKV,QAAQA,QAAUc,OAAOC,OAAOL,EAAKV,QAAQA,UACjDS,KAAI,SAACC,GACFA,EAAK+D,OAAS,QACd/D,EAAKgE,YAAc,SAMzC3L,QAAQC,IAAI,iBACZD,QAAQC,IAAI0K,GACLA,GAiFD+H,GAAiB,SAACrK,EAAME,EAAMG,GAClC,OAAOH,GACH,IAAK,KACDF,EAAKjC,WAAL,GAAgC,EAARsC,EACxBL,EAAI,EAAgB,EAARK,EACZL,EAAI,MAAYlH,KAAKC,IAA6B,EAAxBiH,EAAKjC,WAAL,GAAoD,EAAxBiC,EAAKjC,WAAL,IACtD,MACJ,IAAK,KACDiC,EAAKjC,WAAL,GAAgC,EAARsC,EACxBL,EAAI,MAAYlH,KAAKC,IAA4B,EAAxBiH,EAAKjC,WAAL,GAAoD,EAAxBiC,EAAKjC,WAAL,IACvD,MACF,IAAK,KACDiC,EAAKjC,WAAL,GAAgC,EAARsC,EACxBL,EAAI,EAAgB,EAARK,EACZL,EAAI,OAAalH,KAAKC,IAA4B,EAAxBiH,EAAKjC,WAAL,GAAoD,EAAxBiC,EAAKjC,WAAL,IACtD,MACJ,IAAK,KACDiC,EAAKjC,WAAL,GAAgC,EAARsC,EACxBL,EAAI,OAAalH,KAAKC,IAA4B,EAAxBiH,EAAKjC,WAAL,GAAqD,EAAxBiC,EAAKjC,WAAL,IACzD,MACF,IAAK,QACDiC,EAAI,MAAoB,EAARK,EAChBL,EAAKjC,WAAL,GAAwBjF,KAAKC,IAA4B,EAAxBiH,EAAKjC,WAAL,GAA4C,EAAhBiC,EAAI,OACnE,MACF,IAAK,SACDA,EAAI,OAAqB,EAARK,EACjBL,EAAKjC,WAAL,GAAwBjF,KAAKC,IAA4B,EAAxBiH,EAAKjC,WAAL,GAA6C,EAAjBiC,EAAI,QACnE,MACA,IAAK,IACHA,EAAI,EAAgB,EAARK,EACZL,EAAI,GAAiB,EAARK,EACf,MACA,IAAK,IACHL,EAAI,EAAgB,EAARK,EACZL,EAAI,GAAiB,EAARK,EACf,MACF,QACIL,EAAKE,GAAQG,IA4IjBiK,GAAc,SAACC,EAAKtL,GAAoD,IAA5CuL,EAA2C,uDAA1B,KAAMC,EAAoB,uDAAT,KAC5DhJ,EAAKiJ,GAAa,IAAI,KAQ7B,MAAQ,CACH7M,GAAI4D,EACJsD,SAAUwF,EAGTI,aAAc,KAChBC,UAAW,OACV7M,WAAY,CACVC,GAAG,GACHE,GAAG,IACHD,GAAG,GACHE,GAAG,KAEL0M,YAAa,KACbzJ,KAAM,CAAC2I,KAAM,QAASe,KAAM,IAAKC,WAAY,GAAIC,OAAQ,MACzDC,OAAQ,KACR9R,OAAQ,IACRoF,eAvBqB,OAAnBiM,EACgBA,EAAiB,IAAM/I,EAEzBA,GAoBa8B,WAC7B2H,YAAa,EACbd,SAAS,YACT/G,OAAQpE,EACRqE,YAAY,EACZ1E,QAAS6L,EACTU,KAAM,CAACN,YAAa,KAAMO,OAAQ,KAAMC,OAAQ,KAAMC,QAAS,MAC/DvB,KAAM,KACN7Q,MAAM,IACNL,EAAE,GACFI,EAAE,KAIR,SAASyR,GAAaa,EAAK9R,GAGzB,OAFA8R,EAAMzS,KAAK0S,KAAKD,GAChB9R,EAAMX,KAAKE,MAAMS,GACVX,KAAKE,MAAMF,KAAK2S,UAAYhS,EAAM8R,EAAM,IAAMA,EAwC3D,OACE,cAAC,IAAMtT,SAAP,UACI,eAAC,GAAD,WACI,cAAC,GAAD,UAAQ4Q,IACR,cAAC,EAAD,CAAQ9G,aAAgBA,EAAcC,gBAAmBA,EACjDE,SAAYA,EACZD,eAAkBA,GAClBE,UAAaA,EACbE,QAAWA,EACXD,OAAUA,EACVE,MAASA,EACTE,cAAiBA,EAAeD,QAAWA,EAASE,aAAgBA,EACpEC,aAxCO,SAACjB,GACpBiK,EAA8BjK,GAC7BkK,MAAK,SAAAC,GACF,IAAI7C,EAAW6C,EAASrP,KAAK,GACzBsP,EAAU9C,EAASD,QAEnBgD,EAAahT,KAAKW,IAAL,MAAAX,KAAI,YAAQ+S,EAAQxM,KAAI,SAAA0M,GAAC,OAAIA,EAAEnF,aAC5CoF,EAAgBH,EAAQxC,MAAM,qBAAGzC,UAA0BkF,KAE/D/C,EAASD,QAAU,CAACkD,GACpBhD,EAAYD,GACZpR,QAAQC,IAAImR,GACZ7G,EAAS,OAEZ+J,OAAM,SAAAxP,GACCA,EAAImP,SACN1J,EAAS,WAAYzF,EAAImP,SAASM,QACzBzP,EAAI0P,SACXjK,EAAS,+DAuBLS,oBAlDY,WAExB,IAAIgE,EAAC,eAAQvE,GACbuE,EAAE9I,GAAK,EACP8I,EAAEC,QAAUD,EAAEC,QAAU,EACxB+B,GAAgB,GAChBxG,EAAUwE,IA6CE/D,wBArbgB,WAC5B,IAAIwJ,EAAI,CACJhD,OAAQ,GACRvL,GAAI,EACJiL,QAAS,GACTS,KAAM,gBAEVP,EAAYoD,GACZzU,QAAQC,IAAIwU,IA8aAvJ,kBAjWU,WACtB,GAAIkG,EAASlL,GAAK,EAAE,CAChB,IAAI8I,EAAC,eAAQvE,GACbuE,EAAEhB,QAAQe,SAAWpE,EAErB+J,EAAgB1F,GACXgF,MAAK,SAAAC,GACFjU,QAAQC,IAAIgU,GACZ,IAAI/N,EAAK+N,EAASrP,KAClBoK,EAAE9I,GAAKA,EACPsE,EAAUwE,MAEbsF,OAAM,SAAAxP,GACCA,EAAImP,SACN1J,EAAS,WAAYzF,EAAImP,SAASM,QACzBzP,EAAI0P,SACXjK,EAAS,kEAKhB,CACD,IAAIkK,EAAC,eAAQrD,GACbqD,EAAEhD,OAAS/O,GACX+R,EAAE7C,KAAOxH,EAETK,EAAOuD,QAAQe,SAAWpE,EAC1B8J,EAAEtD,QAAU,CAAC1G,GACbsJ,EAAkBU,GACjBT,MAAK,SAAAC,GACFjU,QAAQC,IAAIgU,GACZ,IAAI/N,EAAK+N,EAASrP,KACjB6P,EAAEvO,GAAKA,EACRmL,EAAYoD,MAEfH,OAAM,SAAAxP,GACCA,EAAImP,SACN1J,EAAS,WAAYzF,EAAImP,SAASM,QACzBzP,EAAI0P,SACXjK,EAAS,kEA2TrB,eAAC,GAAD,WACA,eAAC,GAAD,WACQ,cAAC,GAAD,CAAM+E,SAAYA,EACjB9M,cAAiBA,GAClB+M,cAAiBA,GACjBC,wBA7KkB,WAC9BxP,QAAQC,IAAI,mBACZ,IAAI0U,EAAW,KAERC,EAAU,YAAOjK,GACxB,GAAsB,OAAlBnI,SAA4CgB,IAAlBhB,GAC1BmS,EAAWhC,GAAY,EAAG,OAE3BiC,EAAWhN,KAAK+M,OACd,CAAC,IAAD,EACKhO,EAAI,OAAGnE,SAAH,IAAGA,IAAH,UAAGA,GAAeoE,qBAAlB,aAAG,EAA8BC,MAAM,KACjD,GAAa,OAATF,QAA0BnD,IAATmD,EAAoB,OAEzC,GAAe,IADAA,EAAKhC,OAAS,EACZ,CACb,IAAIkQ,EAAYD,EAAWlD,MAAM,qBAAGxL,KAA0B,EAAVS,EAAK,MACzD,GAAIkO,GAAaA,EAAU5N,QAAQf,KAAOS,EAAK,GAAI,CAC/C,IAAImO,EAAMD,EAAU5N,SACpB0N,EAAWhC,GAAYmC,EAAI5O,GAAI,QAAS4O,EAAIlO,gBACnCR,WAAa,CAClBC,GAAGyO,EAAI1O,WAAWC,GAClBE,GAAG,IACHD,GAAGwO,EAAI1O,WAAWE,GAClBE,GAAGsO,EAAI1O,WAAWI,IAEtBmO,EAASzT,EAAI4T,EAAI1O,WAAWC,GAC5BsO,EAASrT,EAAIwT,EAAI1O,WAAWE,GAC5BqO,EAASnT,OACRL,KAAKC,IAAID,KAAKC,IAAIyT,EAAUzO,WAAWE,IAAOnF,KAAKC,IAAIyT,EAAUzO,WAAWI,KAC7EsO,EAAI7N,QAAQW,KAAK+M,KAK7BrD,EAASsD,IA6IGnF,6BAxIuB,WAAO,IAAD,EACzCzP,QAAQC,IAAI,mBAEZ,IAAM2U,EAAU,YAAOjK,GAEjBhE,EAAI,OAAGnE,SAAH,IAAGA,IAAH,UAAGA,GAAeoE,qBAAlB,aAAG,EAA8BC,MAAM,KAE7CgO,EAAYD,EAAWlD,MAAM,qBAAGxL,KAA0B,EAAVS,EAAK,MACrD,GAAIkO,IAC0B,OAAtBA,EAAU5N,cAA0CzD,IAAtBqR,EAAU5N,SAAsB,CAC9D,IAAI0N,EAAWhC,GACXkC,EAAU3O,GAAI,SAAU2O,EAAUjO,cAAe,IACrD+N,EAASvO,WAAa,CAClBC,GAAGwO,EAAUzO,WAAWC,GACxBE,GAAGsO,EAAUzO,WAAWG,GACxBD,GAAGuO,EAAUzO,WAAWE,GACxBE,GAAGqO,EAAUzO,WAAWI,IAE5BmO,EAASzT,EAAIC,KAAKC,IAAIyT,EAAUzO,WAAWC,IAC3CsO,EAASrT,EAAIH,KAAKC,IAAIyT,EAAUzO,WAAWE,IAC1CqO,EAASpT,MACRJ,KAAKC,IAAID,KAAKC,IAAIyT,EAAUzO,WAAWC,IAAOlF,KAAKC,IAAIyT,EAAUzO,WAAWG,KAC7EoO,EAASnT,OACTL,KAAKC,IAAID,KAAKC,IAAIyT,EAAUzO,WAAWE,IAAOnF,KAAKC,IAAIyT,EAAUzO,WAAWI,KAC/EqO,EAAU5N,QAAU0N,EAI9BrD,EAASsD,IA6GGlF,oBA9Oc,SAACrD,GAC3BrM,QAAQC,IAAI,iBAAmBoM,GAC/B,IAAM5F,EAAQkE,EAAMjE,QAEdC,EAAO0F,EAAIxF,MAAM,KACnBgO,EAAYlK,EAGZhE,EAAK,KACLkO,EAAYpO,EAAMiL,MAAM,qBAAGxL,KAA0B,EAAVS,EAAK,OAGhDA,EAAK,KACLkO,EAAYA,EAAU5N,SAGtBN,EAAK,KACLkO,EAAYA,EAAU5N,QAAQyK,MAAM,qBAAGxL,KAA0B,EAAVS,EAAK,OAGhE3G,QAAQC,IAAI4U,GAEZpS,GAAiBoS,IAyNLlF,yBAtNmB,SAACtD,GAChCrM,QAAQC,IAAI,wBAA0BoM,GAEtC,IAAM1F,EAAO0F,EAAIxF,MAAM,KACjBC,EAASH,EAAKhC,OAAS,EACzBiQ,EAAajK,EAAMjE,QAEvB,GAAe,IAAXI,EAAa,CACZ,IAAIC,EAAQ6N,EAAW5N,WAAW,qBAAGd,KAA0B,EAAVS,EAAK,MACtDI,GAAS,GACV6N,EAAWG,OAAOhO,EAAO,GAIjC,GAAe,IAAXD,EAAa,CACb,IAAIC,EAAQ6N,EAAW5N,WAAW,qBAAGd,KAA0B,EAAVS,EAAK,MACtDI,GAAS,IACV6N,EAAW7N,GAAOE,QAAU,MAIpC,GAAe,IAAXH,EAAa,CACZ,IAAII,EAAS0N,EAAW5N,WAAW,qBAAGd,KAA0B,EAAVS,EAAK,MAC3D,GAAIO,GAAU,EAAG,CACb,IAAIC,EAASyN,EAAW1N,GAAQD,QAAQA,QAAQD,WAAW,qBAAGd,KAA0B,EAAVS,EAAK,MAC/EO,GAAU,GACV0N,EAAW1N,GAAQD,QAAQA,QAAQ8N,OAAO5N,EAAQ,IAK/DnH,QAAQC,IAAI2U,GAEXtD,EAASsD,GACTnS,GAAiB,SAwLL,cAAC,GAAD,UACK,cAAC,EAAD,CAAmB4F,KAAQ7F,GAAe9C,SAhU1C,SAAC6I,EAAMG,GACxB1I,QAAQC,IAAI,cACZD,QAAQC,IAAIuC,IAEZ,IAAMiE,EAAQkE,EAAMjE,QAEpB,GAAsB,OAAlBlE,SAA4CgB,IAAlBhB,GAA9B,CAEA,IAAMmE,EAAI,OAAGnE,SAAH,IAAGA,QAAH,EAAGA,GAAeoE,cAAcC,MAAM,KAC5CgO,EAAY,GAEZlO,EAAK,KACHkO,EAAYpO,EAAMiL,MAAM,qBAAGxL,KAA0B,EAAVS,EAAK,OAGlDA,EAAK,KACLkO,EAAYA,EAAU5N,SAItBN,EAAK,KACHkO,EAAYA,EAAU5N,QAAQyK,MAAM,qBAAGxL,KAA0B,EAAVS,EAAK,OAGlE+L,GAAemC,EAAUtM,EAAKG,GAE9B4I,EAAS7K,GAEVzG,QAAQC,IAAI,kBAAoB4U,EAAY,IAAMtM,EAAO,IAAMG,YAuStD,cAAC,EAAD,CAAQpG,WAAYqI,EAAOpI,cAAe+O,EACtC9O,cAAiBA,GAAeC,iBAAoBA,GACpDC,YAAeA,cCpkBpBsS,GANH,WACV,OACE,cAAC,GAAD,KCKgBC,QACW,cAA7BlS,OAAOmS,SAASC,UAEe,UAA7BpS,OAAOmS,SAASC,UAEhBpS,OAAOmS,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,GAAD,MAEFnR,SAASoR,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3B,MAAK,SAAA4B,GACJA,EAAaC,gBAEdvB,OAAM,SAAApD,GACLlR,QAAQkR,MAAMA,EAAM4E,a","file":"static/js/main.d5831c46.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.103b5fa1.svg\";","import React from 'react';\r\nimport { render } from 'react-dom';\r\nimport { Stage, Layer, Rect, Transformer } from 'react-konva';\r\n\r\nconst Rectangle = ({ shapeProps, isSelected, onSelect, onChange }) => {\r\n  const shapeRef = React.useRef();\r\n  const trRef = React.useRef();\r\n\r\n  React.useEffect(() => {\r\n    if (isSelected) {\r\n        console.log(\"isSelected\");\r\n      // we need to attach transformer manually\r\n      //trRef.current.setNode(shapeRef.current);\r\n      trRef.current.setNodes([shapeRef.current]);\r\n      trRef.current.getLayer().batchDraw();\r\n    }\r\n  }, [isSelected]);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Rect\r\n        onClick={onSelect}\r\n        onTap={onSelect}\r\n        ref={shapeRef}\r\n        {...shapeProps}\r\n        draggable\r\n        onDragEnd={e => {\r\n          console.log(\"onChange 1\" +  e.target.x() + \" \" +  e.target.y() + \" \" + e.target.width() + \" \" + e.target.height());\r\n           onChange({\r\n            ...shapeProps,\r\n            X: Math.abs( Math.floor(e.target.x())),\r\n            Y: Math.abs( Math.floor(e.target.y())),\r\n            Width: Math.abs(Math.floor(e.target.width())),\r\n            Height: Math.abs(Math.floor(e.target.height())),\r\n            rotation: e.target.rotation()\r\n          }); \r\n          console.log(\"onChange 2\" +  Math.abs( Math.floor(e.target.x())) + \" \" +  Math.abs( Math.floor(e.target.y()))+ \" \" + e.target.width() + \" \" + e.target.height());\r\n        }} \r\n        onTransformEnd={e => {\r\n          // transformer is changing scale of the node\r\n          // and NOT its width or height\r\n          // but in the store we have only width and height\r\n          // to match the data better we will reset scale on transform end\r\n          console.log(\"transform\");\r\n          const node = shapeRef.current;\r\n          const scaleX = node.scaleX();\r\n          const scaleY = node.scaleY();\r\n\r\n          // we will reset it back\r\n          node.scaleX(1);\r\n          node.scaleY(1);\r\n           onChange({\r\n            ...shapeProps,\r\n            X: Math.abs(Math.floor(node.x())),\r\n            Y: Math.abs(Math.floor(node.y())),\r\n            // set minimal value\r\n            Width: Math.floor(Math.max(5, node.width() * scaleX)),\r\n            Height: Math.floor(Math.max(node.height() * scaleY)),\r\n            rotation: node.rotation()\r\n          }); \r\n        }}\r\n      />\r\n      {isSelected && (\r\n        <Transformer\r\n          ref={trRef}\r\n          boundBoxFunc={(oldBox, newBox) => {\r\n            // limit resize\r\n            if (newBox.Width < 5 || newBox.Height < 5) {\r\n              return oldBox;\r\n            }\r\n            return newBox;\r\n          }}\r\n        />\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Rectangle;\r\n\r\n\r\n","import React, { useState, useEffect } from 'react';\r\nimport Rectangle from './Rectangle';\r\nimport { Stage, Layer, Rect, Text, Image} from 'react-konva';\r\nimport Konva from 'konva';\r\nimport styled from 'styled-components';\r\nimport UTIF from 'utif';\r\n\r\n//const Tiff = require('tiff');\r\n\r\nexport const CanvasStyle = styled.div`\r\n    background: green;\r\n`\r\n\r\nconst Canvas = ({rectangles, setRectangles, selectedShape, setSelectedShape, imageBase64 }) => {\r\n  const imageRef = React.useRef();\r\n\r\n  const [image, selectImage] = useState(null);\r\n  const [imageWidth, selectImageWidth] = useState(window.innerWidth);\r\n  const [imageHeight, selectImageHeight] = useState(window.innerHeight);\r\n\r\n  useEffect(() => {\r\n    selectBackGroundImage(imageBase64);\r\n  },[imageBase64]);\r\n\r\n  const selectBackGroundImage =  async(imageBase64) => {\r\n    if (imageBase64 !== \"\" &&  imageBase64 !== undefined ) {\r\n      console.log(\"On Canvas\")    \r\n      if (imageBase64.includes(\"tiff\")){\r\n        try{\r\n        let b = _base64ToArrayBuffer(imageBase64);\r\n        const ifds = UTIF.decode(b);\r\n        const firstPageOfTif = ifds[0];\r\n        UTIF.decodeImage(b, ifds[0]);\r\n        const rgba = UTIF.toRGBA8(firstPageOfTif);\r\n  \r\n        const imageWidth = firstPageOfTif.width;\r\n        const imageHeight = firstPageOfTif.height;\r\n  \r\n        const cnv = document.createElement('canvas');\r\n        cnv.width = imageWidth;\r\n        cnv.height = imageHeight;\r\n  \r\n        const ctx = cnv.getContext('2d');\r\n        const imageData = ctx.createImageData(imageWidth, imageHeight);\r\n        for (let i = 0; i < rgba.length; i++) {\r\n          imageData.data[i] = rgba[i];\r\n        }\r\n        ctx.putImageData(imageData, 0, 0);\r\n\r\n        selectImage(cnv);\r\n        selectImageWidth(imageWidth);\r\n        selectImageHeight(imageHeight);\r\n\r\n     \r\n      }catch(err){\r\n          console.log(err)\r\n        }\r\n        //var tiff = new Tiff({ buffer: convertDataURIToBinary(imageBase64) }); \r\n        //var imageBase64 = await tiff.getImage().toDataURL();\r\n      }else{\r\n        var img = new window.Image();\r\n        img.onload = function(){\r\n          console.log(\"onload\");\r\n          console.log(img.width + ' img ' + img.height) \r\n           selectImageWidth(img.width);\r\n           selectImageHeight(img.height);\r\n           selectImage(img);\r\n        }\r\n        img.onerror = function(e){\r\n          console.log(\"error\");\r\n        }\r\n        img.src = imageBase64;\r\n      }\r\n      }else{\r\n        selectImageWidth(window.innerWidth);\r\n        selectImageHeight(window.innerHeight);\r\n        selectImage(null);\r\n      }\r\n     }\r\n\r\n     const BASE64_MARKER = ';base64,';\r\n\r\nfunction convertDataURIToBinary(dataURI) {\r\n  var base64Index = dataURI.indexOf(BASE64_MARKER) + BASE64_MARKER.length;\r\n  var base64 = dataURI.substring(base64Index);\r\n  var raw = window.atob(base64);\r\n  var rawLength = raw.length;\r\n  var array = new ArrayBuffer(rawLength)\r\n  var arrayU = new Uint8Array(array);\r\n\r\n  for(var i = 0; i < rawLength; i++) {\r\n    array[i] = raw.charCodeAt(i);\r\n  }\r\n  return array;\r\n}\r\n\r\nfunction _base64ToArrayBuffer(dataURI) {\r\n  var base64Index = dataURI.indexOf(BASE64_MARKER) + BASE64_MARKER.length;\r\n  var base64 = dataURI.substring(base64Index);\r\n  return Uint8Array.from(atob(base64), c => c.charCodeAt(0));\r\n}\r\n\r\n  const checkDeselect = e => {\r\n    // deselect when clicked on empty area\r\n    console.log(e.target + \" ===\" + imageRef.current)\r\n    const clickedOnEmpty = e.target === imageRef.current;\r\n    if (clickedOnEmpty) {\r\n      setSelectedShape(null);\r\n    }\r\n  };\r\n\r\n const GetAllShapes = (cells) => {\r\n\r\n  let Shapes = [];\r\n  console.log('GetAllShapes');\r\n  //console.log(cells);\r\n  //cells.length !==0  && Shapes.push(GetRectangle(cells[6]));\r\n    cells.map((cell) => {\r\n      Shapes.push(GetRectangle(cell));\r\n      if (cell.SubData !== null && cell.SubData !== undefined){\r\n        Shapes.push(GetRectangle(cell.SubData));\r\n        (Array.isArray(cell.SubData.SubData)?\r\n          cell.SubData.SubData : Object.values(cell.SubData.SubData))\r\n                        .map((subCell) => {\r\n                            Shapes.push(GetRectangle(subCell));\r\n                          });\r\n      }\r\n    });\r\n  return Shapes;\r\n }\r\n\r\n  const GetRectangle = (rect) =>{\r\n    console.log('selectedShape');\r\n    console.log(selectedShape);\r\n    return rect !== undefined && (\r\n      <Rectangle\r\n        key={rect.Id}\r\n        shapeProps={rect}\r\n        \r\n        isSelected={rect.Id === selectedShape?.Id}\r\n        onSelect={() => {\r\n          console.log(\"rect\");\r\n          console.log(rect);\r\n          setSelectedShape(rect);\r\n  \r\n        }}\r\n        onChange={newAttrs => {\r\n          newAttrs.Coordinate = {\r\n            X1:newAttrs.X * 1,\r\n            Y1:newAttrs.Y * 1,\r\n            X2:newAttrs.X * 1 + newAttrs.Width * 1,\r\n            Y2:newAttrs.Y * 1 + newAttrs.Height * 1\r\n          \r\n          } \r\n          \r\n          const rects = rectangles.slice();\r\n\r\n          const keys = rect.NavigationKey.split('/');\r\n          const levels = keys.length - 1;\r\n\r\n          if (levels === 0){\r\n            let index = rects.findIndex( ({ Id }) => Id === keys[0] * 1) ;\r\n            if (index > -1) {\r\n              rects[index]  = newAttrs;\r\n               \r\n             }   \r\n            }\r\n\r\n            if (levels === 1){\r\n                let index = rects.findIndex( ({ Id }) => Id === keys[0] * 1) ;\r\n                if (index > -1) {\r\n                  rects[index].SubData = newAttrs;;\r\n                  }     \r\n            }\r\n\r\n            if (levels === 2){\r\n                let index1 = rects.findIndex( ({ Id }) => Id === keys[0] * 1) ;\r\n                if (index1 > -1) {\r\n                    let index2 = rects[index1].SubData.SubData.findIndex( ({ Id }) => Id === keys[2] * 1) ;\r\n                    if (index1 > -1) {\r\n                      rects[index1].SubData.SubData[index2] = newAttrs;\r\n                    }  \r\n                }   \r\n            }\r\n\r\n\r\n          // rects[index] = newAttrs;\r\n          //console.log(\"newAttrs\" + index);\r\n          \r\n          console.log(\"Canvas onChange\");\r\n          console.log(newAttrs.X + \" \" +  newAttrs.Y + \" \" + newAttrs.Width + \" \" + newAttrs.Height);\r\n    \r\n          console.log(newAttrs);\r\n          setRectangles(rects);\r\n          setSelectedShape(newAttrs);\r\n        }\r\n        }\r\n      />\r\n    );\r\n  }\r\n\r\n  return (\r\n    <CanvasStyle>\r\n    <Stage\r\n    width={imageWidth/2} \r\n    height={imageHeight/2} \r\n    scaleX={0.5} \r\n    scaleY={0.5}\r\n      onMouseDown={checkDeselect}\r\n      onTouchStart={checkDeselect}\r\n    >\r\n      <Layer>\r\n      <Image image={image} ref={imageRef}\r\n        width={imageWidth} height={imageHeight}\r\n        stroke= {'red'} strokeWidth ={10}\r\n         x={0} y={0} />\r\n\r\n      {rectangles && \r\n        GetAllShapes(rectangles)\r\n      }     \r\n      </Layer>\r\n    </Stage>\r\n    </CanvasStyle>\r\n  );\r\n};\r\n\r\nexport default Canvas;\r\n","import React, { useState, useEffect } from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { Form, Row, Col } from 'react-bootstrap';\r\nimport styled from 'styled-components';\r\n\r\nimport './../App.css';\r\n\r\nexport const Container = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n`\r\n\r\nconst ControlProperties = ({item, onChange}) => {\r\n\r\n  const GroupCoordinate = (prop, label, placeholder = \"\") => {\r\n    let value = item && item.Coordinate && item.Coordinate[prop];\r\n        if (placeholder === \"\") placeholder = label;\r\n        return(\r\n            \r\n            <Form.Group as={Row} controlId={prop}>\r\n                {console.log(\"Coordinates\")}\r\n                {console.log(item )}\r\n              <Form.Label column=\"sm\" lg={2} >\r\n              {label}\r\n              </Form.Label>\r\n              <Col sm={10}>\r\n                <Form.Control size=\"sm\" type=\"Text\" \r\n                placeholder={placeholder} \r\n                value={value?? ''}\r\n                onChange={(e) => onChange(prop, e.target.value)} />\r\n              </Col>\r\n            </Form.Group>\r\n            );\r\n}\r\n\r\nconst GroupFont = (prop, label, placeholder = \"\") => {\r\n  let value = item && item.Font && item.Font[prop];\r\n  // item?.font === undefined ? \"\" : item.font[prop];\r\n  if (placeholder === \"\") placeholder = label;\r\n      return(\r\n          <Form.Group as={Row} controlId={prop}>\r\n            <Form.Label column=\"sm\" lg={2} >\r\n            {label}\r\n            </Form.Label>\r\n            <Col sm={10}>\r\n              <Form.Control size=\"sm\" type=\"Text\" \r\n              placeholder={placeholder} \r\n              value={value?? ''}\r\n              onChange={(e) => onChange(prop, e.target.value)} />\r\n            </Col>\r\n          </Form.Group>\r\n          );\r\n}\r\n\r\n    const Group = (prop, label, placeholder = \"\") => {\r\n      let value = item && item[prop];\r\n        if (placeholder === \"\") placeholder = label;\r\n            return(\r\n                <Form.Group as={Row} controlId={prop}>\r\n                  <Form.Label column=\"sm\" lg={2} >\r\n                  {label}\r\n                  </Form.Label>\r\n                  <Col sm={10}>\r\n                    <Form.Control size=\"sm\" type=\"Text\" \r\n                    placeholder={placeholder} \r\n                    value={value?? ''}\r\n                    onChange={(e) => onChange(prop, e.target.value)} />\r\n                  </Col>\r\n                </Form.Group>\r\n                );\r\n    }\r\n\r\n  return (\r\n        \r\n            <Form>\r\n                <Container>\r\n       \r\n                    {Group(\"Id\", \"ID\")}\r\n                    {Group(\"ParentId\", \"Parent ID\")}\r\n                    {Group(\"DisplayText\", \"Diplay Text\")}\r\n\r\n                    {GroupCoordinate(\"X1\", \"X1\",\"X1 Coordinate\")}\r\n                    {GroupCoordinate(\"Y1\", \"Y1\",\"Y1 Coordinate\")}\r\n                    {GroupCoordinate(\"X2\", \"X2\",\"X2 Coordinate\")}\r\n                    {GroupCoordinate(\"Y2\", \"Y2\",\"Y2 Coordinate\")}\r\n                    \r\n                    {GroupFont(\"Type\", \"Font Type\")}\r\n                    {GroupFont(\"Size\", \"Font Size\")}\r\n\r\n                    {Group(\"Width\", \"Width\")}\r\n                    {Group(\"Height\", \"Height\")}\r\n                    {Group(\"X\", \"X\")}\r\n                    {Group(\"Y\", \"Y\")}\r\n                    \r\n                    {Group(\"NodeName\", \"Title\")}\r\n                    {Group(\"Alignment\", \"Alignment\")}\r\n                    {Group(\"RotateAngle\", \"RotateAngle\")}\r\n                </Container>\r\n            </Form>\r\n       \r\n  );\r\n};\r\n\r\nexport default ControlProperties;","import React, {forwardRef, useImperativeHandle} from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport styled from 'styled-components';\r\n\r\nexport const Wrapper = styled.div`\r\n    position: fixed;\r\n    top: 0;\r\n    bottom: 0;\r\n    left: 0;\r\n    right: 0;\r\n`\r\n\r\nexport const Backdrop = styled.div`\r\n    position: fixed;\r\n    top: 0;\r\n    bottom: 0;\r\n    left: 0;\r\n    right: 0;\r\n    z-index: 100;\r\n    background-color: rgba(0,0,0,0.3);\r\n`\r\n\r\nexport const Box = styled.div`\r\n    position: relative;\r\n    top: 50%;\r\n    left: 50%;\r\n    transform: translate(-50%, -50%);\r\n    min-height: 30%;\r\n    width: 40%;\r\n    overflow-y: auto;\r\n    background-color: white;\r\n    box-shadow: 0 0 10px rgba(0,0,0,0.25);\r\n    z-index: 101;\r\n    padding: 40px;\r\n`\r\n//reference : https://www.youtube.com/watch?v=SmMZqh1xdB4\r\nconst Modal = forwardRef((props,ref) => {\r\n  const [display, setDisplay] = React.useState(false);\r\n\r\n  useImperativeHandle(ref, () => {\r\n    return {\r\n      openModal: () => open(),\r\n      close: () => close()\r\n    }\r\n  });\r\n\r\n  const open = () => {\r\n    setDisplay(true)\r\n  };\r\n\r\n  const close = () => {\r\n    setDisplay(false);\r\n  };\r\n\r\n  if (display) {\r\n    return ReactDOM.createPortal(\r\n      <Wrapper>\r\n        <Backdrop onClick={close} />\r\n        <Box>\r\n          {props.children}\r\n        </Box>\r\n      </Wrapper>, document.getElementById(\"modal-root\"))\r\n  }\r\n\r\n  return null;\r\n\r\n});\r\n\r\nexport default Modal","import axios from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'http://localhost:64909/',\r\n});\r\nexport default {\r\n    getDataList: () =>\r\n    instance({\r\n        'method':'GET',\r\n        'url':'/api/Template/'\r\n    }),\r\n    getData: (id) =>\r\n    instance({\r\n        'method':'GET',\r\n        'url':'/api/Template/' + id\r\n    }),\r\n    getCurrentLayoutData: (id) =>\r\n    instance({\r\n        'method':'GET',\r\n        'url':'/api/Template/CurrentLayout/' + id\r\n    }),\r\n    postData: (data) =>\r\n    instance({\r\n        'method': 'POST',\r\n        'url':'/api/Template/',\r\n        'data':data\r\n    })\r\n}","import axios from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'http://localhost:64909/',\r\n});\r\nexport default {\r\n    getDataList: () =>\r\n    instance({\r\n        'method':'GET',\r\n        'url':'/api/Layout/'\r\n    }),\r\n    getData: (id) =>\r\n    instance({\r\n        'method':'GET',\r\n        'url':'/api/Layout/' + id\r\n    }),\r\n    postData: (data) =>\r\n    instance({\r\n        'method': 'POST',\r\n        'url':'/api/Layout/',\r\n        'data':data\r\n    })\r\n}","import React, { useState, useEffect } from 'react';\r\nimport styled from 'styled-components';\r\nimport { AwesomeButton } from \"react-awesome-button\";\r\nimport Modal from \"./Model\";\r\nimport ReactFileReader from 'react-file-reader';\r\nimport FileSaver from 'file-saver';\r\nimport X2JS from 'x2js';\r\nimport Template from '../Data/Template';\r\nimport Layout from '../Data/Layout';\r\nimport _ from 'lodash';\r\n\r\nexport const ScrollerStyle = styled.div`\r\n    margin: 0 auto;\r\n    height: 300px;\r\n    width: 500px;\r\n    overflow: auto;\r\n\r\n    .item {\r\n        margin: 30px 0;\r\n        Display: flex;\r\n        justify-content: flex-start;\r\n\r\n        img {\r\n\r\n        }\r\n\r\n        .name {\r\n\r\n        }\r\n\r\n        .button{\r\n\r\n        }\r\n    }\r\n`\r\nconst Scroller = ({children}) => {\r\n    return (<ScrollerStyle>{children}</ScrollerStyle> );\r\n}\r\n\r\nexport const HeaderStyle = styled.div`\r\n    height: 50px;\r\n    background: pink;\r\n    Display: flex;\r\n\r\n    .select{\r\n        width:200px;\r\n    }\r\n`\r\nconst attrConst= [  {Originalkey: \"$formatting\", newKey: \"Formatting\"},\r\n                    {Originalkey: \"$nodeName\", newKey: \"NodeName\"},\r\n                    {Originalkey: \"$alignment\", newKey: \"Alignment\"},\r\n                    {Originalkey: \"$wordWrap\", newKey: \"WordWrap\"},\r\n                    {Originalkey: \"$type\", newKey: \"Type\"},\r\n                    {Originalkey: \"$lastPageOnly\", newKey: \"LastPageOnly\"},\r\n                    {Originalkey: \"$newLine\", newKey: \"NewLine\"},\r\n                    {Originalkey: \"$specialStartNewLine\", newKey: \"SpecialStartNewLine\"},\r\n                    {Originalkey: \"$activateSpecialStartNewLine\", newKey: \"ActivateSpecialStartNewLine\"},\r\n                    {Originalkey: \"$alwaysNewLine\", newKey: \"AlwaysNewLine\"},\r\n                    {Originalkey: \"$section\", newKey: \"Section\"}];\r\n\r\nconst Header = ({templateName, setTemplateName,\r\n                 setError, setImageBase64, setLayout,\r\n                  version, layout, items,\r\n                isTemplateNew, isDirty, isNewVersion,\r\n                handleOnLoad, handleAddNewVersion, handleCreateNewTemplate,handlePresistance\r\n                }) => {\r\n    const [templates, setTemplates] =  useState([]);  \r\n    const [uploadLayout, setUploadLayout] = useState([]);\r\n    const [name, setName] =  useState(templateName);    \r\n    const [attrs, setAttrs] = useState(attrConst);         \r\n    const modalRef = React.useRef();\r\n\r\n    const openModal = () => {\r\n        modalRef.current.openModal()\r\n        GetAllTemplate();\r\n    };\r\n\r\n    const closeModal = () => {\r\n        modalRef.current.close()\r\n    };\r\n\r\n    useEffect(() => {\r\n        setTemplateName(name);\r\n     }, [name]);\r\n\r\n     useEffect(() => {\r\n        setLayout(uploadLayout);\r\n     }, [uploadLayout]);\r\n\r\n     useEffect(() => {\r\n        console.log(attrs);\r\n     }, [attrs]);\r\n\r\n    const GetAllTemplate = () => {\r\n        Template.getDataList()\r\n        .then(response => {\r\n            let templates = response.data\r\n\r\n            setTemplates(templates);\r\n            console.log(templates);\r\n            setError(\"\");\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n              setError(\"Failure \"+ err.response.status);\r\n            } else if (err.request) {\r\n                setError(\"client never received a response, or request never left\");\r\n            } else {\r\n              // anything else\r\n            }\r\n        })\r\n      }\r\n\r\n      const BASE64_MARKER = ';base64,';\r\n\r\n      const handleUploadTemplate = (file) => {\r\n        var base64Index = file.base64.indexOf(BASE64_MARKER) + BASE64_MARKER.length;\r\n        var base64 = file.base64.substring(base64Index);\r\n          let x = file.base64;\r\n        var decodedString = atob(base64);\r\n        console.log(decodedString);\r\n        var x2js = new X2JS({\r\n            attributePrefix : \"$\"\r\n        });\r\n        var jsonObj = x2js.xml2js( decodedString );\r\n        console.log(jsonObj);\r\n\r\n        let newObj = objectKeysToFirstCapital(jsonObj);\r\n\r\n        console.log(attrs);\r\n\r\n        let newItems = applyAttribute(newObj?.Settings?.CellData?? []);\r\n        newObj.Settings.CellData = newItems;\r\n\r\n        let l = {\r\n            Setting : { \r\n                CellData : newItems,\r\n                Page : newObj.Settings.Page,\r\n            },\r\n            Version : 0\r\n        };\r\n        console.log(l);\r\n\r\n        setUploadLayout(l);\r\n      }\r\n\r\n      const applyAttribute = (items) => {\r\n        let id = 1;\r\n        let newItem =  Object.values(items).map((cell) => {\r\n           cell.Id = id++;\r\n           cell.ParentId = 0;\r\n           cell.Stroke = \"red\";\r\n           cell.StrokeWidth = 6;\r\n           cell.NavigationKey = cell.Id.toString();\r\n           ApplyCoordinate(cell);\r\n           if (cell.SubData !== undefined && cell.SubData !== null && (!_.isEmpty(cell.SubData))) {\r\n               let SubData = cell.SubData;\r\n               SubData.Id = id++;\r\n               SubData.ParentId = cell.Id;\r\n               SubData.Stroke = \"yellow\";\r\n               SubData.StrokeWidth = 6;\r\n               SubData.NavigationKey = cell.NavigationKey.toString() + \"/\" + SubData.Id.toString();\r\n               SubData.Coordinate.Y1 = cell.Coordinate.Y1;\r\n               SubData.Coordinate.Y2 = cell.Coordinate.Y2;\r\n               ApplyCoordinate(SubData);\r\n               if (cell.SubData.SubData !== undefined && cell.SubData.SubData !== null && (!_.isEmpty(cell.SubData.SubData))) {\r\n                 Object.values(cell.SubData.SubData).map((cellSub) => {\r\n                     cellSub.Id = id++;\r\n                     cellSub.ParentId = SubData.Id;\r\n                     cellSub.Stroke = \"green\";\r\n                     cellSub.StrokeWidth = 6; \r\n                     cellSub.NavigationKey = SubData.NavigationKey.toString() + \"/\" + cellSub.Id.toString();\r\n                     cellSub.Coordinate.Y1 = cell.SubData.Coordinate.Y1;\r\n                     cellSub.Coordinate.Y2 = cell.SubData.Coordinate.Y2;\r\n                     ApplyCoordinate(cellSub);\r\n                       return cell;\r\n                   })\r\n               }\r\n               cell.SubData = SubData?? null;\r\n           }\r\n           return cell;\r\n         });\r\n         return newItem;\r\n       }\r\n        \r\n    const ApplyCoordinate = (cell) => {\r\n        cell.X = Math.abs(cell.Coordinate.X1 * 1);\r\n        cell.Y = Math.abs(cell.Coordinate.Y1 * 1);\r\n        cell.Width =  Math.abs(cell.Coordinate['X1'] * 1 - cell.Coordinate['X2'] * 1);\r\n        cell.Height = Math.abs(cell.Coordinate['Y1'] * 1 - cell.Coordinate['Y2'] * 1);\r\n    }\r\n\r\n      let objectKeysToFirstCapital = function (origObj) {\r\n        return Object.keys(origObj).reduce(function (newObj, key) {\r\n            let val = origObj[key];\r\n           // let newVal = (typeof val === 'object') ? objectKeysToFirstCapital(val) : val;\r\n           let newVal = (typeof val === 'object') ?\r\n           Array.isArray(val) ? Object.values(objectKeysToFirstCapital(val)) : objectKeysToFirstCapital(val) \r\n           : val;\r\n            if (key === 'coordinates') key = 'coordinate';\r\n            let newKey = jsUcfirst(key);\r\n\r\n            console.log(key.indexOf('$'));\r\n            if (key.indexOf('$') !== -1) {\r\n                \r\n                if (attrs.findIndex( ({ Originalkey }) => Originalkey === key) === -1){\r\n                   // let arr = [...attrs.list, {key, newKey}];\r\n                   // arr.push({key, newKey});\r\n                   attrs.push({Originalkey : key, newKey : newKey});\r\n                    setAttrs(attrs);\r\n                }\r\n            }\r\n            console.log(attrs);\r\n            newObj[newKey] = newVal;\r\n            return newObj;\r\n        }, {});\r\n    }\r\n        function jsUcfirst(string) \r\n        {\r\n            if (string.indexOf('$') !== -1) \r\n                string = string.slice(1);\r\n            return string.charAt(0).toUpperCase() + string.slice(1);\r\n        } \r\n\r\n        const cleanEmpty = obj => {\r\n            if (Array.isArray(obj)) { \r\n              return obj\r\n                  .map(v => (v && typeof v === 'object') ? cleanEmpty(v) : v)\r\n                  .filter(v => !(v == null)); \r\n            } else { \r\n              return Object.entries(obj)\r\n                  .map(([k, v]) => [k, v && typeof v === 'object' ? cleanEmpty(v) : v])\r\n                  .reduce((a, [k, v]) => (v == null ? a : (a[k]=v, a)), {});\r\n            } \r\n          }\r\n\r\n      let objectKeysToFirstLower = function (origObj) {\r\n        let obj =  Object.keys(origObj).reduce(function (newObj, key) {\r\n            let val = origObj[key];\r\n            if(val === null) return; \r\n            let newVal = (typeof val === 'object') ?\r\n            Array.isArray(val) ? Object.values(objectKeysToFirstLower(val)) : objectKeysToFirstLower(val) \r\n            : val;\r\n            if (key === 'Coordinate') key = 'coordinates';\r\n            let newKey = jsLcfirst(key);\r\n\r\n            if (attrs.findIndex( ({ newKey }) => newKey === key) !== -1){\r\n                newKey = '$' + newKey;\r\n            }\r\n           \r\n            console.log(attrs);\r\n            newObj[newKey] = newVal;\r\n            return newObj;\r\n        }, {});\r\n\r\n        let revisedObj =  deletObject(obj);\r\n        return revisedObj;\r\n    }\r\n        function jsLcfirst(string) \r\n        {\r\n            // if (string.indexOf('$') !== -1) \r\n            //     string = string.slice(1);\r\n            return string.charAt(0).toLowerCase() + string.slice(1);\r\n        } \r\n\r\n        function deletObject(v) {\r\n                delete v.id \r\n                delete v.parentId\r\n                delete v.stroke\r\n                delete v.strokeWidth\r\n                delete v.width\r\n                delete v.height\r\n                delete v.x\r\n                delete v.y\r\n                delete v.navigationKey\r\n\r\n                return v;\r\n        }\r\n\r\n        const getXMLfromObject = (settings) => {\r\n       \r\n            var x2js = new X2JS({\r\n                attributePrefix : \"$\"\r\n            });\r\n    \r\n            let x = objectKeysToFirstLower(settings);\r\n    \r\n            var xmlObj = x2js.js2xml( x );\r\n            console.log(xmlObj);\r\n    \r\n            return xmlObj;\r\n    \r\n    \r\n            // let x = objectKeysToFirstLower(items);\r\n            // let newObj = Object.values(x);\r\n    \r\n            // var settings = {\r\n            //     settings : {\r\n            //         cellData :newObj,\r\n            //         page : page\r\n            //     }\r\n            // }\r\n    \r\n            // var x2js = new X2JS({\r\n            //     attributePrefix : \"$\"\r\n            // });\r\n    \r\n            // var xmlObj = x2js.js2xml( settings );\r\n            // console.log(xmlObj);\r\n    \r\n            // return xmlObj;\r\n        }\r\n        \r\n    //   const handleFileSave = () => {\r\n    //     var x2js = new X2JS({\r\n    //         attributePrefix : \"$\"\r\n    //     });\r\n\r\n    //     // var settings = {\r\n    //     //     settings : {\r\n    //     //         cellData :items,\r\n    //     //         page : layout.Setting.Page\r\n    //     //     }\r\n    //     // }\r\n\r\n    //      let x = objectKeysToFirstLower(items);\r\n    //     // let newObj = Object.values(x);\r\n\r\n\r\n    //     var settings = {\r\n    //         settings : {\r\n    //             cellData :x,\r\n    //             page : layout.Setting.Page\r\n    //         }\r\n    //     }\r\n\r\n    //     var xmlObj = x2js.js2xml( settings );\r\n    //     console.log(xmlObj);\r\n\r\n    //     var blob = new Blob([xmlObj], {type: \"xml/plain;charset=utf-8\"});\r\n    //     FileSaver.saveAs(blob, \"template.xml\");\r\n    //   }\r\n\r\n\r\n      const handleFileSave = () => {\r\n        var settings = {\r\n            settings : {\r\n                cellData : [ ...items],\r\n                page : layout.Setting.Page?? {X:0,Y:0}\r\n            }\r\n        }\r\n        var xmlObj = getXMLfromObject(cleanEmpty(settings));\r\n\r\n        var blob = new Blob([xmlObj], {type: \"xml/plain;charset=utf-8\"});\r\n        FileSaver.saveAs(blob, \"template.xml\");\r\n      }\r\n\r\n    //   useEffect(() => {\r\n    //     console.log(name);\r\n    //     setTemplateName(name);\r\n    //  }, [name]);\r\n\r\n    return (\r\n        <React.Fragment> \r\n                 <HeaderStyle>\r\n                <h1>Designer</h1>\r\n                \r\n                    {/* <input \r\n                    value = {name}\r\n                    onChange={e => {\r\n                    \r\n                        setName(e.target.value);\r\n                    \r\n                    }} \r\n                    placeholder=\"Type and search\"\r\n                    disabled = {!isTemplateNew} \r\n                    /> */}\r\n                \r\n                \r\n                {/* <AwesomeButton\r\n                    type=\"primary\"\r\n                    ripple\r\n                    onPress={() => {\r\n                        handleCreateNewTemplate();\r\n                    }}\r\n                    >\r\n                    New\r\n                </AwesomeButton> */}\r\n                {true  &&\r\n                <ReactFileReader base64={true} handleFiles={ (file) => setImageBase64(file.base64)} fileTypes={[\".tif\"]}>\r\n                    <AwesomeButton\r\n                    type=\"primary\"\r\n                    ripple\r\n                    >\r\n                    Upload Image\r\n                    </AwesomeButton>\r\n                </ReactFileReader>\r\n                }\r\n                {true  &&\r\n                <ReactFileReader base64={true} handleFiles={ (file) => handleUploadTemplate(file)} fileTypes={[\".xml\"]}>\r\n                    <AwesomeButton\r\n                    type=\"primary\"\r\n                    ripple\r\n                    >\r\n                    Upload Template\r\n                    </AwesomeButton>\r\n                </ReactFileReader>\r\n                }\r\n                {/* <AwesomeButton\r\n                    type=\"primary\"\r\n                    ripple\r\n                    onPress={() => {\r\n                        openModal();\r\n                    }}\r\n                    >\r\n                    Find\r\n                </AwesomeButton>\r\n                \r\n                <Modal ref={modalRef}>\r\n                    <h1>Please Select ur Template</h1>\r\n                        {templates && \r\n                          <Scroller>\r\n                          {templates.map(({ Id, Name, Base64Thumbnail }) => {\r\n                            return (\r\n                                <div className=\"item\">\r\n                                  <img src={Base64Thumbnail} />\r\n                                  <span className=\"name\">{Name}</span>\r\n                                  <AwesomeButton\r\n                                  className=\"button\"\r\n                                    type=\"primary\"\r\n                                    ripple\r\n                                    onPress={() => {\r\n                                        handleOnLoad(Id);\r\n                                        closeModal();\r\n                                    }}\r\n                                    >\r\n                                    Select\r\n                                </AwesomeButton>\r\n                                </div>\r\n                            );\r\n                          })}\r\n                        </Scroller>\r\n                        }\r\n                    \r\n                    <AwesomeButton\r\n                    type=\"primary\"\r\n                    ripple\r\n                    onPress={() => {\r\n                        closeModal();\r\n                    }}\r\n                    >\r\n                    Close\r\n                </AwesomeButton>\r\n                   \r\n                </Modal>\r\n                {isTemplateNew? \"true\" : \"false\"}\r\n                    {isDirty? \"true\" : \"false\"}\r\n                {(!isTemplateNew) && isDirty && (!isNewVersion) &&\r\n                <AwesomeButton\r\n                    type=\"primary\"\r\n                    ripple\r\n                    onPress={() => {\r\n                        handleAddNewVersion();\r\n                    }}\r\n                    >\r\n                    Add Version\r\n                </AwesomeButton>\r\n                }\r\n                \r\n                {(!isTemplateNew) && version &&\r\n                <span>{isNewVersion ? \"New Version\" : \"Version \" + version?? \"0\"}</span>\r\n                }\r\n                \r\n                {isDirty &&\r\n                <AwesomeButton\r\n                    type=\"primary\"\r\n                    ripple\r\n                    onPress={() => {\r\n                        handlePresistance();\r\n                    }}\r\n                    >\r\n                    {isTemplateNew ? \"Create\" : \"Save\"  }\r\n                </AwesomeButton>\r\n                } */}\r\n\r\n                {isDirty &&\r\n                <AwesomeButton\r\n                    type=\"primary\"\r\n                    ripple\r\n                    onPress={() => {\r\n                        handleFileSave();\r\n                    }}\r\n                    >\r\n                    SaveToFile\r\n                </AwesomeButton>\r\n                }\r\n            </HeaderStyle>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default Header;","import React, { useState, useEffect } from 'react';\r\nimport styled from 'styled-components';\r\nimport { AwesomeButton } from \"react-awesome-button\";\r\nimport \"react-awesome-button/dist/styles.css\";\r\n\r\nimport TreeMenu , { defaultChildren, ItemComponent } from 'react-simple-tree-menu';\r\nimport 'react-simple-tree-menu/dist/main.css';\r\n\r\nexport const TreeStyle = styled.div`\r\n    \r\n    max-height:100%;\r\n    overflow-y:auto;\r\n\r\n    .ul {\r\n        list-style-type:none;\r\n        margin:0;\r\n        padding:0;\r\n    }\r\n\r\n    .li {\r\n        Display: flex;\r\n        margin:0;\r\n        padding:0;\r\n    \r\n        .cancelBtn {\r\n            border-radius: 50%;\r\n            background: yellow;\r\n        }\r\n    }\r\n`\r\n\r\n\r\nconst Tree = ({treeData, selectedShape, treeOpenNodes, \r\n    handleAddItemToTreeNode, handleAddContainerToTreeNode,\r\n    handleTreeViewClick, handleDeleteItemfromTree}) => {\r\n\r\n\r\n    return(\r\n        <TreeStyle>\r\n        <TreeMenu data={treeData} hasSearch={true}\r\n        onClickItem={({ key, label, ...props }) => {\r\n           handleTreeViewClick(key);   \r\n      }}\r\n      activeKey={selectedShape?.NavigationKey ?? ''}\r\n      openNodes={treeOpenNodes}   \r\n    >                       \r\n        {({ search, items, resetOpenNodes }) => (\r\n            <>\r\n            <AwesomeButton\r\n            type=\"primary\"\r\n            ripple\r\n            onPress={() => {\r\n                handleAddItemToTreeNode();\r\n            }}\r\n            >\r\n            Add Item\r\n        </AwesomeButton>\r\n        <AwesomeButton\r\n            type=\"primary\"\r\n            ripple\r\n            onPress={() => {\r\n                handleAddContainerToTreeNode();\r\n            }}\r\n            >\r\n            Add Container\r\n        </AwesomeButton>\r\n        <AwesomeButton\r\n            type=\"primary\"\r\n            ripple\r\n            onPress={resetOpenNodes}\r\n            >\r\n            reset \r\n        </AwesomeButton>\r\n        <input onChange={e => search(e.target.value)} placeholder=\"Type and search\" />\r\n            <ul className=\"ul\">\r\n                {items.map(({key, ...props}) => (\r\n                <span key={key} className=\"li\">\r\n                    <ItemComponent key={key} {...props} />\r\n                   \r\n                    <AwesomeButton \r\n                    id = {key}\r\n                        type=\"primary\"\r\n                        ripple\r\n                        onPress={() => {\r\n                            console.log(\"x\");\r\n                            console.log(key);\r\n                            handleDeleteItemfromTree(key);\r\n                        }}\r\n                        >\r\n                        x\r\n                    </AwesomeButton>\r\n                \r\n                </span>\r\n                ))}\r\n            </ul>\r\n            </>\r\n        )}\r\n    </TreeMenu>\r\n    </TreeStyle>\r\n    );\r\n}\r\n\r\nexport default Tree;","import React, { useState, useEffect } from 'react';\r\nimport styled from 'styled-components';\r\nimport _ from 'lodash';\r\nimport Canvas from './Canvas';\r\nimport ControlProperties from './Properties';\r\nimport Header from \"./Header\";\r\nimport Tree from \"./Tree\";\r\nimport ImageUploader from 'react-images-uploading';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\n\r\nimport TreeMenu , { defaultChildren, ItemComponent } from 'react-simple-tree-menu';\r\nimport 'react-simple-tree-menu/dist/main.css';\r\n\r\nimport Template from '../Data/Template';\r\nimport Layout from '../Data/Layout';\r\n\r\nimport './../App.css';\r\n\r\nexport const ErrorStyle = styled.div`\r\n    background: red;\r\n    Display: flex;\r\n`\r\nexport const Container = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n`\r\nexport const HeaderStyle = styled.div`\r\n    height: 50px;\r\n    background: pink;\r\n    Display: flex;\r\n\r\n    .select{\r\n        width:200px;\r\n    }\r\n`\r\nexport const SectionStyle = styled.div`\r\n    display: flex;\r\n    flex-direction: row;\r\n`\r\nexport const DetailStyle = styled.div`\r\n    height: 1000px;\r\n    widht: 200px;\r\n    Display: flex;\r\n`\r\n\r\nexport const PropertiesStyle = styled.div`\r\n    background: yellow;\r\n    max-height:100%;\r\n    overflow-y:auto;\r\n`\r\n\r\nconst Error = ({children}) => {\r\n    return (<ErrorStyle>{children}</ErrorStyle> );\r\n}\r\n\r\nconst Section = ({children}) => {\r\n    return (<SectionStyle>{children}</SectionStyle> );\r\n}\r\n\r\nconst Detail = ({children}) => {\r\n    return (<DetailStyle>{children}</DetailStyle> );\r\n}\r\n\r\nconst Properties = ({children}) => {\r\n    return (<PropertiesStyle>{children}</PropertiesStyle> );\r\n}\r\n\r\nconst Designer = () => {\r\n    //_.isEqual(one, two); // true\r\n\r\n    const [isDirty, setIsDirty] = useState(false);\r\n    const [isTemplateNew, setIsTemplateNew] = useState(false);\r\n    const [isNewVersion, setIsNewVersion] = useState(false);\r\n    const [version, setVersion] = useState(null);\r\n    const [error, setError] = useState(\"\");\r\n    const [template, setTemplate] = useState({Id: -1, Layouts : [{Setting : { CellData : []}}]});\r\n    const [templateName, setTemplateName] = useState(\"\");\r\n    const [layout, setLayout] = useState({Setting : { CellData : []}});\r\n    const [items, setItems] = useState([]);\r\n    const [treeData, setTreeData] = useState([]);\r\n    const [treeOpenNodes, setTreeOpenNodes] = useState(['']);\r\n    const [selectedShape, setSelectedShape] = useState(null);\r\n    const [imageBase64, setImageBase64] = useState(\"\");\r\n\r\n    useEffect(() => {\r\n        console.log(error);\r\n    \r\n     }, [error]);\r\n \r\n    useEffect(() => {\r\n       setImageBase64(template.Base64);\r\n       setLayout(template.Layouts?.find(e => true)?? GetNewLayout());\r\n       setTemplateName(template.Name);\r\n       setIsTemplateNew((template.Id?? 0) === 0 ? true : false);\r\n       handleIsDirty();\r\n   \r\n    }, [template]);\r\n\r\n    useEffect(() => {\r\n        setItems(applyLineGraphics(layout.Setting?.CellData?? []));\r\n        setVersion(layout.Version);\r\n     }, [layout]);\r\n\r\n    useEffect(() => {\r\n        setTreeData(convertToTreeDate(items));\r\n        if (items.length == 0) setSelectedShape(null); \r\n        handleIsDirty();\r\n     }, [items]);\r\n\r\n    useEffect(() => {\r\n        let indexOfFirst = (selectedShape?.NavigationKey?? \"\").indexOf('/');\r\n        if (indexOfFirst < 0){\r\n            setTreeOpenNodes(undefined);\r\n        }else\r\n        {\r\n            let openNodes = selectedShape?.NavigationKey ?? undefined\r\n            //  let openNodes = treeOpenNodes\r\n             // openNodes.push(selectedShape.NavigationKey)\r\n              setTreeOpenNodes(openNodes);\r\n        }\r\n     }, [selectedShape]);\r\n\r\n     const handleIsDirty = () =>{\r\n\r\n        //let isDirtyImage = !_.isEqual(template.Base64, imageBase64);\r\n\r\n        let isDirtyLayout = !_.isEqual(template.Layouts?.find(e => true)?? GetNewLayout(), layout);\r\n        let isDirtyItems = !_.isEqual(template.Layouts?.find(e => true)?.Setting?.CellData ?? [], items);\r\n\r\n        setIsDirty((isDirtyLayout ||isDirtyItems)? true : false);\r\n\r\n     }\r\n\r\n     const handleCreateNewTemplate =() =>{\r\n        let t = {\r\n            Base64: \"\",\r\n            Id: 0,\r\n            Layouts: [],\r\n            Name: \"New Template\"\r\n        };\r\n        setTemplate(t);\r\n        console.log(t);\r\n     }\r\n     const GetNewLayout = () => {\r\n         return {\r\n            Id: 0,\r\n            Setting: {CellData: [], Page: {}, RemPage: null, Type: null, Index: 0},\r\n            TemplateId: 0,\r\n            Version: 0\r\n           };\r\n     }\r\n\r\n  const convertToTreeDate = (items) => {\r\n      let nodes = [];\r\n      \r\n    items.map((cell) => {\r\n        if (cell.SubData){\r\n            let SubNodes = [];\r\n            if (cell.SubData.SubData !== null && Array.isArray(cell.SubData.SubData)){\r\n                SubNodes = GetTreeDataSub(cell.SubData.SubData);\r\n            } \r\n            nodes.push(\r\n                {\r\n                    key : cell.Id,\r\n                    label : cell.NodeName, \r\n                    nodes : [\r\n                                {   \r\n                                    key : cell.SubData.Id.toString(), \r\n                                    label : cell.SubData.NodeName,\r\n                                    nodes : GetTreeDataSub(cell.SubData.SubData)\r\n                                }\r\n                        ]\r\n                    })    \r\n        }\r\n        else\r\n        {\r\n           nodes.push({key : cell.Id.toString() , label : cell.NodeName, nodes : []})\r\n        }\r\n        console.log(\"nodes\");\r\n        console.log(nodes);\r\n        \r\n    });\r\n    return nodes;\r\n  }\r\n\r\n  const GetTreeDataSub = (cell) =>\r\n  {\r\n    let nodes = [];\r\n    (Array.isArray(cell)? cell : Object.values(cell))\r\n    .map((cell) => {\r\n            nodes.push({key : cell.Id.toString(), label : cell.NodeName, nodes : []})\r\n        });\r\n        return nodes;\r\n  }\r\n\r\n    const applyLineGraphics = (items) => {\r\n        items.map((cell) => {\r\n            cell.Stroke = \"red\";\r\n            cell.StrokeWidth = 6;\r\n            if (cell.SubData !== undefined && cell.SubData !== null) {\r\n                cell.SubData.Stroke = \"yellow\";\r\n                cell.SubData.StrokeWidth = 6;\r\n                if (cell.SubData.SubData !== undefined && cell.SubData.SubData !== null) {\r\n                    (Array.isArray(cell.SubData.SubData)?\r\n                        cell.SubData.SubData : Object.values(cell.SubData.SubData))\r\n                        .map((cell) => {\r\n                            cell.Stroke = \"green\";\r\n                            cell.StrokeWidth = 6; \r\n                        })\r\n                }\r\n            }\r\n      })\r\n\r\n      console.log(\"applyGraphics\");\r\n      console.log(items);\r\n      return items\r\n    }\r\n\r\n    const handlePresistance = () => {\r\n        if (template.Id > 0){\r\n            let l = { ...layout};\r\n            l.Setting.CellData = items;\r\n\r\n            Layout.postData(l)\r\n                .then(response => {\r\n                    console.log(response);\r\n                    let Id = response.data;\r\n                    l.Id = Id;\r\n                    setLayout(l);\r\n                })\r\n                .catch(err => {\r\n                    if (err.response) {\r\n                      setError(\"Failure \"+ err.response.status);\r\n                    } else if (err.request) {\r\n                        setError(\"client never received a response, or request never left\");\r\n                    } else {\r\n                      // anything else\r\n                    }\r\n                });\r\n            }else{\r\n                let t = { ...template};\r\n                t.Base64 = imageBase64;\r\n                t.Name = templateName;\r\n                \r\n                layout.Setting.CellData = items\r\n                t.Layouts = [layout];\r\n                Template.postData(t)\r\n                .then(response => {\r\n                    console.log(response);\r\n                    let Id = response.data;\r\n                     t.Id = Id;\r\n                    setTemplate(t);\r\n                })\r\n                .catch(err => {\r\n                    if (err.response) {\r\n                      setError(\"Failure \"+ err.response.status);\r\n                    } else if (err.request) {\r\n                        setError(\"client never received a response, or request never left\");\r\n                    } else {\r\n                      // anything else\r\n                    }\r\n                });\r\n            }\r\n    }\r\n\r\n      const handleSave = (prop, value) => {\r\n        console.log(\"handleSave\");\r\n        console.log(selectedShape);\r\n\r\n        const rects = items.slice();\r\n\r\n        if (selectedShape === null || selectedShape === undefined) return; \r\n\r\n        const keys = selectedShape?.NavigationKey.split('/');\r\n        let shapeItem = {};\r\n\r\n        if (keys[0]){\r\n              shapeItem = rects.find( ({ Id }) => Id === keys[0] * 1) ;\r\n        }\r\n\r\n        if (keys[1]){\r\n            shapeItem = shapeItem.SubData ;\r\n\r\n        }\r\n\r\n        if (keys[2]){\r\n              shapeItem = shapeItem.SubData.find( ({ Id }) => Id === keys[2] * 1) ;\r\n        }\r\n\r\n        updateProperty(shapeItem,prop,value); \r\n\r\n        setItems(rects);\r\n    \r\n       console.log(\"handleSave rnd \" + shapeItem + \" \" + prop + \" \" + value);\r\n      }\r\n      \r\n      const updateProperty = (item, prop, value) => {\r\n        switch(prop) {\r\n            case 'X1':\r\n                item.Coordinate['X1'] = value * 1;\r\n                item['X'] = value * 1;\r\n                item['Width'] = Math.abs( item.Coordinate['X1'] * 1 - item.Coordinate['X2'] * 1);\r\n                break;\r\n            case 'X2':\r\n                item.Coordinate['X2'] = value * 1;\r\n                item['Width'] = Math.abs(item.Coordinate['X1'] * 1 - item.Coordinate['X2'] * 1);\r\n              break;\r\n            case 'Y1':\r\n                item.Coordinate['Y1'] = value * 1;\r\n                item['Y'] = value * 1;\r\n                item['Height'] = Math.abs(item.Coordinate['Y1'] * 1 - item.Coordinate['Y2'] * 1);\r\n                break;\r\n            case 'Y2':\r\n                item.Coordinate['Y2'] = value * 1;\r\n                item['Height'] = Math.abs(item.Coordinate['Y1'] * 1 -  item.Coordinate['Y2'] * 1);\r\n              break;\r\n            case 'Width':\r\n                item['Width'] = value * 1;\r\n                item.Coordinate['X2'] = Math.abs(item.Coordinate['X1'] * 1 + item['Width'] * 1);\r\n              break;\r\n            case 'Height':\r\n                item['Height'] = value * 1;\r\n                item.Coordinate['Y2'] = Math.abs(item.Coordinate['Y1'] * 1 + item['Height'] * 1);\r\n              break;\r\n              case 'X':\r\n                item['X'] = value * 1;\r\n                item['X1'] = value * 1;\r\n              break;\r\n              case 'Y':\r\n                item['Y'] = value * 1;\r\n                item['Y1'] = value * 1;\r\n              break;\r\n            default:\r\n                item[prop] = value;\r\n          }\r\n      }\r\n\r\n      const handleFiles = (file) => {\r\n        setImageBase64(file.base64);\r\n      }\r\n\r\n      const handleTreeViewClick = (key) => {\r\n        console.log(\"TreeMenu click\" + key);\r\n        const rects = items.slice();\r\n\r\n        const keys = key.split('/');\r\n        let shapeItem = items;\r\n        let item = {};\r\n\r\n        if (keys[0]){\r\n            shapeItem = rects.find( ({ Id }) => Id === keys[0] * 1) ;\r\n        }\r\n\r\n        if (keys[1]){\r\n            shapeItem = shapeItem.SubData ;\r\n        }\r\n\r\n        if (keys[2]){\r\n            shapeItem = shapeItem.SubData.find( ({ Id }) => Id === keys[2] * 1) ;\r\n        }\r\n       \r\n        console.log(shapeItem);\r\n\r\n        setSelectedShape(shapeItem);\r\n      };\r\n\r\n      const handleDeleteItemfromTree = (key) => {\r\n        console.log(\"TreeMenu Delete click\" + key);\r\n\r\n        const keys = key.split('/');\r\n        const levels = keys.length - 1;\r\n        let shapeItems = items.slice();\r\n\r\n        if (levels === 0){\r\n             let index = shapeItems.findIndex( ({ Id }) => Id === keys[0] * 1) ;\r\n             if (index > -1) {\r\n                shapeItems.splice(index, 1);\r\n              }   \r\n        }\r\n\r\n        if (levels === 1){\r\n            let index = shapeItems.findIndex( ({ Id }) => Id === keys[0] * 1) ;\r\n            if (index > -1) {\r\n               shapeItems[index].SubData = null;;\r\n             }     \r\n       }\r\n\r\n       if (levels === 2){\r\n            let index1 = shapeItems.findIndex( ({ Id }) => Id === keys[0] * 1) ;\r\n            if (index1 > -1) {\r\n                let index2 = shapeItems[index1].SubData.SubData.findIndex( ({ Id }) => Id === keys[2] * 1) ;\r\n                if (index1 > -1) {\r\n                    shapeItems[index1].SubData.SubData.splice(index2, 1);\r\n                }  \r\n            }   \r\n       }\r\n\r\n       console.log(shapeItems);\r\n\r\n        setItems(shapeItems); \r\n        setSelectedShape(null);    \r\n       \r\n      }\r\n\r\n      const handleAddItemToTreeNode = () => {\r\n        console.log(\"handleAddToTree\");\r\n        let newShape = null;\r\n\r\n         const shapeItems = [...items];\r\n        if (selectedShape === null || selectedShape === undefined){\r\n            newShape = GetNewShape(0, 'red');\r\n           \r\n           shapeItems.push(newShape);\r\n        }else{\r\n            const keys = selectedShape?.NavigationKey?.split('/');\r\n            if (keys === null || keys === undefined) return;\r\n            const levels = keys.length - 1;\r\n            if (levels === 1){\r\n                let shapeItem = shapeItems.find( ({ Id }) => Id === keys[0] * 1) ;\r\n                if (shapeItem && shapeItem.SubData.Id !== keys[1]) {\r\n                    let sub = shapeItem.SubData;\r\n                    newShape = GetNewShape(sub.Id, 'green', sub.NavigationKey);\r\n                    newShape.Coordinate = {\r\n                        X1:sub.Coordinate.X1,\r\n                        X2:110,\r\n                        Y1:sub.Coordinate.Y1,\r\n                        Y2:sub.Coordinate.Y2\r\n                    }\r\n                    newShape.X = sub.Coordinate.X1;\r\n                    newShape.Y = sub.Coordinate.Y1;\r\n                    newShape.Height =\r\n                     Math.abs(Math.abs(shapeItem.Coordinate.Y1) -  Math.abs(shapeItem.Coordinate.Y2));\r\n                    sub.SubData.push(newShape);\r\n                }  \r\n            }\r\n        }\r\n\r\n        setItems(shapeItems);\r\n       // if (newShape) setSelectedShape(newShape);\r\n      }\r\n\r\n      \r\n      const handleAddContainerToTreeNode = () => {\r\n        console.log(\"handleAddToTree\");\r\n\r\n        const shapeItems = [...items];\r\n      \r\n        const keys = selectedShape?.NavigationKey?.split('/');\r\n\r\n        let shapeItem = shapeItems.find( ({ Id }) => Id === keys[0] * 1) ;\r\n            if (shapeItem) {\r\n                if (shapeItem.SubData === null || shapeItem.SubData === undefined){\r\n                    let newShape = GetNewShape(\r\n                        shapeItem.Id, 'yellow', shapeItem.NavigationKey, []);\r\n                    newShape.Coordinate = {\r\n                        X1:shapeItem.Coordinate.X1,\r\n                        X2:shapeItem.Coordinate.X2,\r\n                        Y1:shapeItem.Coordinate.Y1,\r\n                        Y2:shapeItem.Coordinate.Y2,\r\n                    }\r\n                    newShape.X = Math.abs(shapeItem.Coordinate.X1);\r\n                    newShape.Y = Math.abs(shapeItem.Coordinate.Y1);\r\n                     newShape.Width =\r\n                      Math.abs(Math.abs(shapeItem.Coordinate.X1) -  Math.abs(shapeItem.Coordinate.X2));\r\n                     newShape.Height =\r\n                     Math.abs(Math.abs(shapeItem.Coordinate.Y1) -  Math.abs(shapeItem.Coordinate.Y2));\r\n                  shapeItem.SubData = newShape;\r\n                }\r\n            }  \r\n    \r\n        setItems(shapeItems);\r\n      }\r\n\r\n      const GetNewShape = (pId, stroke, pNavigationKey = null, pSubData = null) => {\r\n          let id = getRandomInt(100,200);\r\n          let navigationKey = \"';\"\r\n          if (pNavigationKey !== null) {\r\n              navigationKey = pNavigationKey + \"/\" + id;\r\n          }else{\r\n            navigationKey = id;\r\n          }\r\n\r\n       return  {\r\n            Id: id,\r\n            parentId: pId,\r\n            // ImageData: null,\r\n            // ImageSource: null,\r\n             LastPageOnly: null,\r\n           Alignment: \"left\",\r\n            Coordinate: {\r\n              X1:10,\r\n              X2:110,\r\n              Y1:10,\r\n              Y2:110\r\n            },\r\n            DisplayText: null,\r\n            Font: {Type: \"arial\", Size: \"8\", Formatting: \"\", Weight: null},\r\n            Format: null,\r\n            Height: 100,\r\n            NavigationKey: navigationKey.toString(),\r\n            rotateAngle: 0,\r\n            NodeName:'New Shape',\r\n            Stroke: stroke,\r\n            StrokeWidth:5,\r\n            SubData: pSubData,\r\n            Text: {DisplayText: null, Prefix: null, Midfix: null, Postfix: null},\r\n            Type: null,\r\n            Width:100,\r\n            X:10,\r\n            Y:10\r\n          }\r\n      }\r\n      \r\n      function getRandomInt(min, max) {\r\n        min = Math.ceil(min);\r\n        max = Math.floor(max);\r\n        return Math.floor(Math.random() * (max - min + 1)) + min;\r\n    }\r\n\r\n    const handleAddNewVersion = () => {\r\n\r\n        let l = { ...layout};\r\n        l.Id = 0;\r\n        l.Version = l.Version + 1;\r\n        setIsNewVersion(true);\r\n        setLayout(l);\r\n      };\r\n\r\n      const handleOnLoad = (id) => {\r\n        Template.getCurrentLayoutData(id)\r\n        .then(response => {\r\n            let template = response.data[0]\r\n            let layouts = template.Layouts;\r\n\r\n            let maxVersion = Math.max(...layouts.map(o => o.Version));\r\n            let currentLayout = layouts.find( ({ Version }) => Version === maxVersion);\r\n\r\n            template.Layouts = [currentLayout]\r\n            setTemplate(template);\r\n            console.log(template);\r\n            setError(\"\");\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n              setError(\"Failure \"+ err.response.status);\r\n            } else if (err.request) {\r\n                setError(\"client never received a response, or request never left\");\r\n            } else {\r\n              // anything else\r\n            }\r\n        })\r\n      }\r\n\r\n     \r\n\r\n\r\n  return (\r\n    <React.Fragment> \r\n        <Container>\r\n            <Error>{error}</Error>\r\n            <Header templateName = {templateName} setTemplateName = {setTemplateName}\r\n                    setError = {setError} \r\n                    setImageBase64 = {setImageBase64} \r\n                    setLayout = {setLayout}\r\n                    version = {version} \r\n                    layout = {layout}\r\n                    items = {items}\r\n                    isTemplateNew = {isTemplateNew} isDirty = {isDirty} isNewVersion = {isNewVersion}\r\n                    handleOnLoad ={handleOnLoad}\r\n                    handleAddNewVersion= {handleAddNewVersion}\r\n                    handleCreateNewTemplate = {handleCreateNewTemplate}\r\n                    handlePresistance = {handlePresistance}/>\r\n            <Section>\r\n            <Detail>\r\n                    <Tree treeData = {treeData}\r\n                     selectedShape = {selectedShape}\r\n                    treeOpenNodes = {treeOpenNodes} \r\n                    handleAddItemToTreeNode = {handleAddItemToTreeNode}\r\n                    handleAddContainerToTreeNode = {handleAddContainerToTreeNode}\r\n                    handleTreeViewClick = {handleTreeViewClick}\r\n                    handleDeleteItemfromTree = {handleDeleteItemfromTree}>\r\n                        \r\n                      \r\n                    </Tree>\r\n                    <Properties>                   \r\n                         <ControlProperties item = {selectedShape} onChange={handleSave}/>\r\n                    </Properties>\r\n                </Detail>\r\n                <Canvas rectangles={items} setRectangles={setItems}\r\n                    selectedShape = {selectedShape} setSelectedShape = {setSelectedShape}\r\n                    imageBase64 = {imageBase64}/>\r\n            </Section>\r\n        </Container>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Designer;\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Designer from './Component/Designer';\n\nconst App = () => {\n  return (\n    <Designer></Designer>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}