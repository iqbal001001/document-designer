[{"C:\\Dev\\Zap\\zap-document-designer\\src\\index.js":"1","C:\\Dev\\Zap\\zap-document-designer\\src\\App.js":"2","C:\\Dev\\Zap\\zap-document-designer\\src\\serviceWorker.js":"3","C:\\Dev\\Zap\\zap-document-designer\\src\\Component\\Designer.js":"4","C:\\Dev\\Zap\\zap-document-designer\\src\\Component\\Canvas.js":"5","C:\\Dev\\Zap\\zap-document-designer\\src\\Component\\Properties.js":"6","C:\\Dev\\Zap\\zap-document-designer\\src\\Component\\Tree.js":"7","C:\\Dev\\Zap\\zap-document-designer\\src\\Component\\Header.js":"8","C:\\Dev\\Zap\\zap-document-designer\\src\\Data\\Layout.js":"9","C:\\Dev\\Zap\\zap-document-designer\\src\\Data\\Template.js":"10","C:\\Dev\\Zap\\zap-document-designer\\src\\Component\\Rectangle.js":"11","C:\\Dev\\Zap\\zap-document-designer\\src\\Component\\Model.js":"12"},{"size":503,"mtime":499162500000,"results":"13","hashOfConfig":"14"},{"size":210,"mtime":1607871882002,"results":"15","hashOfConfig":"14"},{"size":5086,"mtime":499162500000,"results":"16","hashOfConfig":"14"},{"size":20121,"mtime":1608123017479,"results":"17","hashOfConfig":"14"},{"size":6917,"mtime":1608042351512,"results":"18","hashOfConfig":"14"},{"size":3554,"mtime":1600004376309,"results":"19","hashOfConfig":"14"},{"size":2838,"mtime":1608123136491,"results":"20","hashOfConfig":"14"},{"size":17011,"mtime":1608122277143,"results":"21","hashOfConfig":"14"},{"size":466,"mtime":1600092438916,"results":"22","hashOfConfig":"14"},{"size":608,"mtime":1600182046280,"results":"23","hashOfConfig":"14"},{"size":2723,"mtime":1607874428189,"results":"24","hashOfConfig":"14"},{"size":1422,"mtime":1600308690629,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"kbjand",{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"28"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"28"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"28"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"28"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"28"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"28"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"28"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"28"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"28"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},"C:\\Dev\\Zap\\zap-document-designer\\src\\index.js",[],["61","62"],"C:\\Dev\\Zap\\zap-document-designer\\src\\App.js",["63"],"import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Designer from './Component/Designer';\n\nconst App = () => {\n  return (\n    <Designer></Designer>\n  );\n};\n\nexport default App;\n","C:\\Dev\\Zap\\zap-document-designer\\src\\serviceWorker.js",[],"C:\\Dev\\Zap\\zap-document-designer\\src\\Component\\Designer.js",["64","65","66","67","68","69","70","71","72","73","74","75","76","77"],"import React, { useState, useEffect } from 'react';\r\nimport styled from 'styled-components';\r\nimport _ from 'lodash';\r\nimport Canvas from './Canvas';\r\nimport ControlProperties from './Properties';\r\nimport Header from \"./Header\";\r\nimport Tree from \"./Tree\";\r\nimport ImageUploader from 'react-images-uploading';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\n\r\nimport TreeMenu , { defaultChildren, ItemComponent } from 'react-simple-tree-menu';\r\nimport 'react-simple-tree-menu/dist/main.css';\r\n\r\nimport Template from '../Data/Template';\r\nimport Layout from '../Data/Layout';\r\n\r\nimport './../App.css';\r\n\r\nexport const ErrorStyle = styled.div`\r\n    background: red;\r\n    Display: flex;\r\n`\r\nexport const Container = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n`\r\nexport const HeaderStyle = styled.div`\r\n    height: 50px;\r\n    background: pink;\r\n    Display: flex;\r\n\r\n    .select{\r\n        width:200px;\r\n    }\r\n`\r\nexport const SectionStyle = styled.div`\r\n    display: flex;\r\n    flex-direction: row;\r\n`\r\nexport const DetailStyle = styled.div`\r\n    height: 1000px;\r\n    widht: 200px;\r\n    Display: flex;\r\n`\r\n\r\nexport const PropertiesStyle = styled.div`\r\n    background: yellow;\r\n    max-height:100%;\r\n    overflow-y:auto;\r\n`\r\n\r\nconst Error = ({children}) => {\r\n    return (<ErrorStyle>{children}</ErrorStyle> );\r\n}\r\n\r\nconst Section = ({children}) => {\r\n    return (<SectionStyle>{children}</SectionStyle> );\r\n}\r\n\r\nconst Detail = ({children}) => {\r\n    return (<DetailStyle>{children}</DetailStyle> );\r\n}\r\n\r\nconst Properties = ({children}) => {\r\n    return (<PropertiesStyle>{children}</PropertiesStyle> );\r\n}\r\n\r\nconst Designer = () => {\r\n    //_.isEqual(one, two); // true\r\n\r\n    const [isDirty, setIsDirty] = useState(false);\r\n    const [isTemplateNew, setIsTemplateNew] = useState(false);\r\n    const [isNewVersion, setIsNewVersion] = useState(false);\r\n    const [version, setVersion] = useState(null);\r\n    const [error, setError] = useState(\"\");\r\n    const [template, setTemplate] = useState({Id: -1, Layouts : [{Setting : { CellData : []}}]});\r\n    const [templateName, setTemplateName] = useState(\"\");\r\n    const [layout, setLayout] = useState({Setting : { CellData : []}});\r\n    const [items, setItems] = useState([]);\r\n    const [treeData, setTreeData] = useState([]);\r\n    const [treeOpenNodes, setTreeOpenNodes] = useState(['']);\r\n    const [selectedShape, setSelectedShape] = useState(null);\r\n    const [imageBase64, setImageBase64] = useState(\"\");\r\n\r\n    useEffect(() => {\r\n        console.log(error);\r\n    \r\n     }, [error]);\r\n \r\n    useEffect(() => {\r\n       setImageBase64(template.Base64);\r\n       setLayout(template.Layouts?.find(e => true)?? GetNewLayout());\r\n       setTemplateName(template.Name);\r\n       setIsTemplateNew((template.Id?? 0) === 0 ? true : false);\r\n       handleIsDirty();\r\n   \r\n    }, [template]);\r\n\r\n    useEffect(() => {\r\n        setItems(applyLineGraphics(layout.Setting?.CellData?? []));\r\n        setVersion(layout.Version);\r\n     }, [layout]);\r\n\r\n    useEffect(() => {\r\n        setTreeData(convertToTreeDate(items));\r\n        if (items.length == 0) setSelectedShape(null); \r\n        handleIsDirty();\r\n     }, [items]);\r\n\r\n    useEffect(() => {\r\n        let indexOfFirst = (selectedShape?.NavigationKey?? \"\").indexOf('/');\r\n        if (indexOfFirst < 0){\r\n            setTreeOpenNodes(undefined);\r\n        }else\r\n        {\r\n            let openNodes = selectedShape?.NavigationKey ?? undefined\r\n            //  let openNodes = treeOpenNodes\r\n             // openNodes.push(selectedShape.NavigationKey)\r\n              setTreeOpenNodes(openNodes);\r\n        }\r\n     }, [selectedShape]);\r\n\r\n     const handleIsDirty = () =>{\r\n\r\n        //let isDirtyImage = !_.isEqual(template.Base64, imageBase64);\r\n\r\n        let isDirtyLayout = !_.isEqual(template.Layouts?.find(e => true)?? GetNewLayout(), layout);\r\n        let isDirtyItems = !_.isEqual(template.Layouts?.find(e => true)?.Setting?.CellData ?? [], items);\r\n\r\n        setIsDirty((isDirtyLayout ||isDirtyItems)? true : false);\r\n\r\n     }\r\n\r\n     const handleCreateNewTemplate =() =>{\r\n        let t = {\r\n            Base64: \"\",\r\n            Id: 0,\r\n            Layouts: [],\r\n            Name: \"New Template\"\r\n        };\r\n        setTemplate(t);\r\n        console.log(t);\r\n     }\r\n     const GetNewLayout = () => {\r\n         return {\r\n            Id: 0,\r\n            Setting: {CellData: [], Page: {}, RemPage: null, Type: null, Index: 0},\r\n            TemplateId: 0,\r\n            Version: 0\r\n           };\r\n     }\r\n\r\n  const convertToTreeDate = (items) => {\r\n      let nodes = [];\r\n      \r\n    items.map((cell) => {\r\n        if (cell.SubData){\r\n            let SubNodes = [];\r\n            if (cell.SubData.SubData !== null && Array.isArray(cell.SubData.SubData)){\r\n                SubNodes = GetTreeDataSub(cell.SubData.SubData);\r\n            } \r\n            nodes.push(\r\n                {\r\n                    key : cell.Id,\r\n                    label : cell.NodeName, \r\n                    nodes : [\r\n                                {   \r\n                                    key : cell.SubData.Id.toString(), \r\n                                    label : cell.SubData.NodeName,\r\n                                    nodes : GetTreeDataSub(cell.SubData.SubData)\r\n                                }\r\n                        ]\r\n                    })    \r\n        }\r\n        else\r\n        {\r\n           nodes.push({key : cell.Id.toString() , label : cell.NodeName, nodes : []})\r\n        }\r\n        console.log(\"nodes\");\r\n        console.log(nodes);\r\n        \r\n    });\r\n    return nodes;\r\n  }\r\n\r\n  const GetTreeDataSub = (cell) =>\r\n  {\r\n    let nodes = [];\r\n    (Array.isArray(cell)? cell : Object.values(cell))\r\n    .map((cell) => {\r\n            nodes.push({key : cell.Id.toString(), label : cell.NodeName, nodes : []})\r\n        });\r\n        return nodes;\r\n  }\r\n\r\n    const applyLineGraphics = (items) => {\r\n        items.map((cell) => {\r\n            cell.Stroke = \"red\";\r\n            cell.StrokeWidth = 6;\r\n            if (cell.SubData !== undefined && cell.SubData !== null) {\r\n                cell.SubData.Stroke = \"yellow\";\r\n                cell.SubData.StrokeWidth = 6;\r\n                if (cell.SubData.SubData !== undefined && cell.SubData.SubData !== null) {\r\n                    (Array.isArray(cell.SubData.SubData)?\r\n                        cell.SubData.SubData : Object.values(cell.SubData.SubData))\r\n                        .map((cell) => {\r\n                            cell.Stroke = \"green\";\r\n                            cell.StrokeWidth = 6; \r\n                        })\r\n                }\r\n            }\r\n      })\r\n\r\n      console.log(\"applyGraphics\");\r\n      console.log(items);\r\n      return items\r\n    }\r\n\r\n    const handlePresistance = () => {\r\n        if (template.Id > 0){\r\n            let l = { ...layout};\r\n            l.Setting.CellData = items;\r\n\r\n            Layout.postData(l)\r\n                .then(response => {\r\n                    console.log(response);\r\n                    let Id = response.data;\r\n                    l.Id = Id;\r\n                    setLayout(l);\r\n                })\r\n                .catch(err => {\r\n                    if (err.response) {\r\n                      setError(\"Failure \"+ err.response.status);\r\n                    } else if (err.request) {\r\n                        setError(\"client never received a response, or request never left\");\r\n                    } else {\r\n                      // anything else\r\n                    }\r\n                });\r\n            }else{\r\n                let t = { ...template};\r\n                t.Base64 = imageBase64;\r\n                t.Name = templateName;\r\n                \r\n                layout.Setting.CellData = items\r\n                t.Layouts = [layout];\r\n                Template.postData(t)\r\n                .then(response => {\r\n                    console.log(response);\r\n                    let Id = response.data;\r\n                     t.Id = Id;\r\n                    setTemplate(t);\r\n                })\r\n                .catch(err => {\r\n                    if (err.response) {\r\n                      setError(\"Failure \"+ err.response.status);\r\n                    } else if (err.request) {\r\n                        setError(\"client never received a response, or request never left\");\r\n                    } else {\r\n                      // anything else\r\n                    }\r\n                });\r\n            }\r\n    }\r\n\r\n      const handleSave = (prop, value) => {\r\n        console.log(\"handleSave\");\r\n        console.log(selectedShape);\r\n\r\n        const rects = items.slice();\r\n\r\n        if (selectedShape === null || selectedShape === undefined) return; \r\n\r\n        const keys = selectedShape?.NavigationKey.split('/');\r\n        let shapeItem = {};\r\n\r\n        if (keys[0]){\r\n              shapeItem = rects.find( ({ Id }) => Id === keys[0] * 1) ;\r\n        }\r\n\r\n        if (keys[1]){\r\n            shapeItem = shapeItem.SubData ;\r\n\r\n        }\r\n\r\n        if (keys[2]){\r\n              shapeItem = shapeItem.SubData.find( ({ Id }) => Id === keys[2] * 1) ;\r\n        }\r\n\r\n        updateProperty(shapeItem,prop,value); \r\n\r\n        setItems(rects);\r\n    \r\n       console.log(\"handleSave rnd \" + shapeItem + \" \" + prop + \" \" + value);\r\n      }\r\n      \r\n      const updateProperty = (item, prop, value) => {\r\n        switch(prop) {\r\n            case 'X1':\r\n                item.Coordinate['X1'] = value * 1;\r\n                item['X'] = value * 1;\r\n                item['Width'] = Math.abs( item.Coordinate['X1'] * 1 - item.Coordinate['X2'] * 1);\r\n                break;\r\n            case 'X2':\r\n                item.Coordinate['X2'] = value * 1;\r\n                item['Width'] = Math.abs(item.Coordinate['X1'] * 1 - item.Coordinate['X2'] * 1);\r\n              break;\r\n            case 'Y1':\r\n                item.Coordinate['Y1'] = value * 1;\r\n                item['Y'] = value * 1;\r\n                item['Height'] = Math.abs(item.Coordinate['Y1'] * 1 - item.Coordinate['Y2'] * 1);\r\n                break;\r\n            case 'Y2':\r\n                item.Coordinate['Y2'] = value * 1;\r\n                item['Height'] = Math.abs(item.Coordinate['Y1'] * 1 -  item.Coordinate['Y2'] * 1);\r\n              break;\r\n            case 'Width':\r\n                item['Width'] = value * 1;\r\n                item.Coordinate['X2'] = Math.abs(item.Coordinate['X1'] * 1 + item['Width'] * 1);\r\n              break;\r\n            case 'Height':\r\n                item['Height'] = value * 1;\r\n                item.Coordinate['Y2'] = Math.abs(item.Coordinate['Y1'] * 1 + item['Height'] * 1);\r\n              break;\r\n              case 'X':\r\n                item['X'] = value * 1;\r\n                item['X1'] = value * 1;\r\n              break;\r\n              case 'Y':\r\n                item['Y'] = value * 1;\r\n                item['Y1'] = value * 1;\r\n              break;\r\n            default:\r\n                item[prop] = value;\r\n          }\r\n      }\r\n\r\n      const handleFiles = (file) => {\r\n        setImageBase64(file.base64);\r\n      }\r\n\r\n      const handleTreeViewClick = (key) => {\r\n        console.log(\"TreeMenu click\" + key);\r\n        const rects = items.slice();\r\n\r\n        const keys = key.split('/');\r\n        let shapeItem = items;\r\n        let item = {};\r\n\r\n        if (keys[0]){\r\n            shapeItem = rects.find( ({ Id }) => Id === keys[0] * 1) ;\r\n        }\r\n\r\n        if (keys[1]){\r\n            shapeItem = shapeItem.SubData ;\r\n        }\r\n\r\n        if (keys[2]){\r\n            shapeItem = shapeItem.SubData.find( ({ Id }) => Id === keys[2] * 1) ;\r\n        }\r\n       \r\n        console.log(shapeItem);\r\n\r\n        setSelectedShape(shapeItem);\r\n      };\r\n\r\n      const handleDeleteItemfromTree = (key) => {\r\n        console.log(\"TreeMenu Delete click\" + key);\r\n\r\n        const keys = key.split('/');\r\n        const levels = keys.length - 1;\r\n        let shapeItems = items.slice();\r\n\r\n        if (levels === 0){\r\n             let index = shapeItems.findIndex( ({ Id }) => Id === keys[0] * 1) ;\r\n             if (index > -1) {\r\n                shapeItems.splice(index, 1);\r\n              }   \r\n        }\r\n\r\n        if (levels === 1){\r\n            let index = shapeItems.findIndex( ({ Id }) => Id === keys[0] * 1) ;\r\n            if (index > -1) {\r\n               shapeItems[index].SubData = null;;\r\n             }     \r\n       }\r\n\r\n       if (levels === 2){\r\n            let index1 = shapeItems.findIndex( ({ Id }) => Id === keys[0] * 1) ;\r\n            if (index1 > -1) {\r\n                let index2 = shapeItems[index1].SubData.SubData.findIndex( ({ Id }) => Id === keys[2] * 1) ;\r\n                if (index1 > -1) {\r\n                    shapeItems[index1].SubData.SubData.splice(index2, 1);\r\n                }  \r\n            }   \r\n       }\r\n\r\n       console.log(shapeItems);\r\n\r\n        setItems(shapeItems); \r\n        setSelectedShape(null);    \r\n       \r\n      }\r\n\r\n      const handleAddItemToTreeNode = () => {\r\n        console.log(\"handleAddToTree\");\r\n        let newShape = null;\r\n\r\n         const shapeItems = [...items];\r\n        if (selectedShape === null || selectedShape === undefined){\r\n            newShape = GetNewShape(0, 'red');\r\n           \r\n           shapeItems.push(newShape);\r\n        }else{\r\n            const keys = selectedShape?.NavigationKey?.split('/');\r\n            if (keys === null || keys === undefined) return;\r\n            const levels = keys.length - 1;\r\n            if (levels === 1){\r\n                let shapeItem = shapeItems.find( ({ Id }) => Id === keys[0] * 1) ;\r\n                if (shapeItem && shapeItem.SubData.Id !== keys[1]) {\r\n                    let sub = shapeItem.SubData;\r\n                    newShape = GetNewShape(sub.Id, 'green', sub.NavigationKey);\r\n                    newShape.Coordinate = {\r\n                        X1:sub.Coordinate.X1,\r\n                        X2:110,\r\n                        Y1:sub.Coordinate.Y1,\r\n                        Y2:sub.Coordinate.Y2\r\n                    }\r\n                    newShape.X = sub.Coordinate.X1;\r\n                    newShape.Y = sub.Coordinate.Y1;\r\n                    newShape.Height =\r\n                     Math.abs(Math.abs(shapeItem.Coordinate.Y1) -  Math.abs(shapeItem.Coordinate.Y2));\r\n                    sub.SubData.push(newShape);\r\n                }  \r\n            }\r\n        }\r\n\r\n        setItems(shapeItems);\r\n       // if (newShape) setSelectedShape(newShape);\r\n      }\r\n\r\n      \r\n      const handleAddContainerToTreeNode = () => {\r\n        console.log(\"handleAddToTree\");\r\n\r\n        const shapeItems = [...items];\r\n      \r\n        const keys = selectedShape?.NavigationKey?.split('/');\r\n\r\n        let shapeItem = shapeItems.find( ({ Id }) => Id === keys[0] * 1) ;\r\n            if (shapeItem) {\r\n                if (shapeItem.SubData === null || shapeItem.SubData === undefined){\r\n                    let newShape = GetNewShape(\r\n                        shapeItem.Id, 'yellow', shapeItem.NavigationKey, []);\r\n                    newShape.Coordinate = {\r\n                        X1:shapeItem.Coordinate.X1,\r\n                        X2:shapeItem.Coordinate.X2,\r\n                        Y1:shapeItem.Coordinate.Y1,\r\n                        Y2:shapeItem.Coordinate.Y2,\r\n                    }\r\n                    newShape.X = Math.abs(shapeItem.Coordinate.X1);\r\n                    newShape.Y = Math.abs(shapeItem.Coordinate.Y1);\r\n                     newShape.Width =\r\n                      Math.abs(Math.abs(shapeItem.Coordinate.X1) -  Math.abs(shapeItem.Coordinate.X2));\r\n                     newShape.Height =\r\n                     Math.abs(Math.abs(shapeItem.Coordinate.Y1) -  Math.abs(shapeItem.Coordinate.Y2));\r\n                  shapeItem.SubData = newShape;\r\n                }\r\n            }  \r\n    \r\n        setItems(shapeItems);\r\n      }\r\n\r\n      const GetNewShape = (pId, stroke, pNavigationKey = null, pSubData = null) => {\r\n          let id = getRandomInt(100,200);\r\n          let navigationKey = \"';\"\r\n          if (pNavigationKey !== null) {\r\n              navigationKey = pNavigationKey + \"/\" + id;\r\n          }else{\r\n            navigationKey = id;\r\n          }\r\n\r\n       return  {\r\n            Id: id,\r\n            parentId: pId,\r\n            // ImageData: null,\r\n            // ImageSource: null,\r\n             LastPageOnly: null,\r\n           Alignment: \"left\",\r\n            Coordinate: {\r\n              X1:10,\r\n              X2:110,\r\n              Y1:10,\r\n              Y2:110\r\n            },\r\n            DisplayText: null,\r\n            Font: {Type: \"arial\", Size: \"8\", Formatting: \"\", Weight: null},\r\n            Format: null,\r\n            Height: 100,\r\n            NavigationKey: navigationKey.toString(),\r\n            rotateAngle: 0,\r\n            NodeName:'New Shape',\r\n            Stroke: stroke,\r\n            StrokeWidth:5,\r\n            SubData: pSubData,\r\n            Text: {DisplayText: null, Prefix: null, Midfix: null, Postfix: null},\r\n            Type: null,\r\n            Width:100,\r\n            X:10,\r\n            Y:10\r\n          }\r\n      }\r\n      \r\n      function getRandomInt(min, max) {\r\n        min = Math.ceil(min);\r\n        max = Math.floor(max);\r\n        return Math.floor(Math.random() * (max - min + 1)) + min;\r\n    }\r\n\r\n    const handleAddNewVersion = () => {\r\n\r\n        let l = { ...layout};\r\n        l.Id = 0;\r\n        l.Version = l.Version + 1;\r\n        setIsNewVersion(true);\r\n        setLayout(l);\r\n      };\r\n\r\n      const handleOnLoad = (id) => {\r\n        Template.getCurrentLayoutData(id)\r\n        .then(response => {\r\n            let template = response.data[0]\r\n            let layouts = template.Layouts;\r\n\r\n            let maxVersion = Math.max(...layouts.map(o => o.Version));\r\n            let currentLayout = layouts.find( ({ Version }) => Version === maxVersion);\r\n\r\n            template.Layouts = [currentLayout]\r\n            setTemplate(template);\r\n            console.log(template);\r\n            setError(\"\");\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n              setError(\"Failure \"+ err.response.status);\r\n            } else if (err.request) {\r\n                setError(\"client never received a response, or request never left\");\r\n            } else {\r\n              // anything else\r\n            }\r\n        })\r\n      }\r\n\r\n     \r\n\r\n\r\n  return (\r\n    <React.Fragment> \r\n        <Container>\r\n            <Error>{error}</Error>\r\n            <Header templateName = {templateName} setTemplateName = {setTemplateName}\r\n                    setError = {setError} \r\n                    setImageBase64 = {setImageBase64} \r\n                    setLayout = {setLayout}\r\n                    version = {version} \r\n                    layout = {layout}\r\n                    items = {items}\r\n                    isTemplateNew = {isTemplateNew} isDirty = {isDirty} isNewVersion = {isNewVersion}\r\n                    handleOnLoad ={handleOnLoad}\r\n                    handleAddNewVersion= {handleAddNewVersion}\r\n                    handleCreateNewTemplate = {handleCreateNewTemplate}\r\n                    handlePresistance = {handlePresistance}/>\r\n            <Section>\r\n            <Detail>\r\n                    <Tree treeData = {treeData}\r\n                     selectedShape = {selectedShape}\r\n                    treeOpenNodes = {treeOpenNodes} \r\n                    handleAddItemToTreeNode = {handleAddItemToTreeNode}\r\n                    handleAddContainerToTreeNode = {handleAddContainerToTreeNode}\r\n                    handleTreeViewClick = {handleTreeViewClick}\r\n                    handleDeleteItemfromTree = {handleDeleteItemfromTree}>\r\n                        \r\n                      \r\n                    </Tree>\r\n                    <Properties>                   \r\n                         <ControlProperties item = {selectedShape} onChange={handleSave}/>\r\n                    </Properties>\r\n                </Detail>\r\n                <Canvas rectangles={items} setRectangles={setItems}\r\n                    selectedShape = {selectedShape} setSelectedShape = {setSelectedShape}\r\n                    imageBase64 = {imageBase64}/>\r\n            </Section>\r\n        </Container>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Designer;\r\n","C:\\Dev\\Zap\\zap-document-designer\\src\\Component\\Canvas.js",["78","79","80","81","82","83","84","85"],"import React, { useState, useEffect } from 'react';\r\nimport Rectangle from './Rectangle';\r\nimport { Stage, Layer, Rect, Text, Image} from 'react-konva';\r\nimport Konva from 'konva';\r\nimport styled from 'styled-components';\r\nimport UTIF from 'utif';\r\n\r\n//const Tiff = require('tiff');\r\n\r\nexport const CanvasStyle = styled.div`\r\n    background: green;\r\n`\r\n\r\nconst Canvas = ({rectangles, setRectangles, selectedShape, setSelectedShape, imageBase64 }) => {\r\n  const imageRef = React.useRef();\r\n\r\n  const [image, selectImage] = useState(null);\r\n  const [imageWidth, selectImageWidth] = useState(window.innerWidth);\r\n  const [imageHeight, selectImageHeight] = useState(window.innerHeight);\r\n\r\n  useEffect(() => {\r\n    selectBackGroundImage(imageBase64);\r\n  },[imageBase64]);\r\n\r\n  const selectBackGroundImage =  async(imageBase64) => {\r\n    if (imageBase64 !== \"\" &&  imageBase64 !== undefined ) {\r\n      console.log(\"On Canvas\")    \r\n      if (imageBase64.includes(\"tiff\")){\r\n        try{\r\n        let b = _base64ToArrayBuffer(imageBase64);\r\n        const ifds = UTIF.decode(b);\r\n        const firstPageOfTif = ifds[0];\r\n        UTIF.decodeImage(b, ifds[0]);\r\n        const rgba = UTIF.toRGBA8(firstPageOfTif);\r\n  \r\n        const imageWidth = firstPageOfTif.width;\r\n        const imageHeight = firstPageOfTif.height;\r\n  \r\n        const cnv = document.createElement('canvas');\r\n        cnv.width = imageWidth;\r\n        cnv.height = imageHeight;\r\n  \r\n        const ctx = cnv.getContext('2d');\r\n        const imageData = ctx.createImageData(imageWidth, imageHeight);\r\n        for (let i = 0; i < rgba.length; i++) {\r\n          imageData.data[i] = rgba[i];\r\n        }\r\n        ctx.putImageData(imageData, 0, 0);\r\n\r\n        selectImage(cnv);\r\n        selectImageWidth(imageWidth);\r\n        selectImageHeight(imageHeight);\r\n\r\n     \r\n      }catch(err){\r\n          console.log(err)\r\n        }\r\n        //var tiff = new Tiff({ buffer: convertDataURIToBinary(imageBase64) }); \r\n        //var imageBase64 = await tiff.getImage().toDataURL();\r\n      }else{\r\n        var img = new window.Image();\r\n        img.onload = function(){\r\n          console.log(\"onload\");\r\n          console.log(img.width + ' img ' + img.height) \r\n           selectImageWidth(img.width);\r\n           selectImageHeight(img.height);\r\n           selectImage(img);\r\n        }\r\n        img.onerror = function(e){\r\n          console.log(\"error\");\r\n        }\r\n        img.src = imageBase64;\r\n      }\r\n      }else{\r\n        selectImageWidth(window.innerWidth);\r\n        selectImageHeight(window.innerHeight);\r\n        selectImage(null);\r\n      }\r\n     }\r\n\r\n     const BASE64_MARKER = ';base64,';\r\n\r\nfunction convertDataURIToBinary(dataURI) {\r\n  var base64Index = dataURI.indexOf(BASE64_MARKER) + BASE64_MARKER.length;\r\n  var base64 = dataURI.substring(base64Index);\r\n  var raw = window.atob(base64);\r\n  var rawLength = raw.length;\r\n  var array = new ArrayBuffer(rawLength)\r\n  var arrayU = new Uint8Array(array);\r\n\r\n  for(var i = 0; i < rawLength; i++) {\r\n    array[i] = raw.charCodeAt(i);\r\n  }\r\n  return array;\r\n}\r\n\r\nfunction _base64ToArrayBuffer(dataURI) {\r\n  var base64Index = dataURI.indexOf(BASE64_MARKER) + BASE64_MARKER.length;\r\n  var base64 = dataURI.substring(base64Index);\r\n  return Uint8Array.from(atob(base64), c => c.charCodeAt(0));\r\n}\r\n\r\n  const checkDeselect = e => {\r\n    // deselect when clicked on empty area\r\n    console.log(e.target + \" ===\" + imageRef.current)\r\n    const clickedOnEmpty = e.target === imageRef.current;\r\n    if (clickedOnEmpty) {\r\n      setSelectedShape(null);\r\n    }\r\n  };\r\n\r\n const GetAllShapes = (cells) => {\r\n\r\n  let Shapes = [];\r\n  console.log('GetAllShapes');\r\n  //console.log(cells);\r\n  //cells.length !==0  && Shapes.push(GetRectangle(cells[6]));\r\n    cells.map((cell) => {\r\n      Shapes.push(GetRectangle(cell));\r\n      if (cell.SubData !== null && cell.SubData !== undefined){\r\n        Shapes.push(GetRectangle(cell.SubData));\r\n        (Array.isArray(cell.SubData.SubData)?\r\n          cell.SubData.SubData : Object.values(cell.SubData.SubData))\r\n                        .map((subCell) => {\r\n                            Shapes.push(GetRectangle(subCell));\r\n                          });\r\n      }\r\n    });\r\n  return Shapes;\r\n }\r\n\r\n  const GetRectangle = (rect) =>{\r\n    console.log('selectedShape');\r\n    console.log(selectedShape);\r\n    return rect !== undefined && (\r\n      <Rectangle\r\n        key={rect.Id}\r\n        shapeProps={rect}\r\n        \r\n        isSelected={rect.Id === selectedShape?.Id}\r\n        onSelect={() => {\r\n          console.log(\"rect\");\r\n          console.log(rect);\r\n          setSelectedShape(rect);\r\n  \r\n        }}\r\n        onChange={newAttrs => {\r\n          newAttrs.Coordinate = {\r\n            X1:newAttrs.X * 1,\r\n            Y1:newAttrs.Y * 1,\r\n            X2:newAttrs.X * 1 + newAttrs.Width * 1,\r\n            Y2:newAttrs.Y * 1 + newAttrs.Height * 1\r\n          \r\n          } \r\n          \r\n          const rects = rectangles.slice();\r\n\r\n          const keys = rect.NavigationKey.split('/');\r\n          const levels = keys.length - 1;\r\n\r\n          if (levels === 0){\r\n            let index = rects.findIndex( ({ Id }) => Id === keys[0] * 1) ;\r\n            if (index > -1) {\r\n              rects[index]  = newAttrs;\r\n               \r\n             }   \r\n            }\r\n\r\n            if (levels === 1){\r\n                let index = rects.findIndex( ({ Id }) => Id === keys[0] * 1) ;\r\n                if (index > -1) {\r\n                  rects[index].SubData = newAttrs;;\r\n                  }     \r\n            }\r\n\r\n            if (levels === 2){\r\n                let index1 = rects.findIndex( ({ Id }) => Id === keys[0] * 1) ;\r\n                if (index1 > -1) {\r\n                    let index2 = rects[index1].SubData.SubData.findIndex( ({ Id }) => Id === keys[2] * 1) ;\r\n                    if (index1 > -1) {\r\n                      rects[index1].SubData.SubData[index2] = newAttrs;\r\n                    }  \r\n                }   \r\n            }\r\n\r\n\r\n          // rects[index] = newAttrs;\r\n          //console.log(\"newAttrs\" + index);\r\n          \r\n          console.log(\"Canvas onChange\");\r\n          console.log(newAttrs.X + \" \" +  newAttrs.Y + \" \" + newAttrs.Width + \" \" + newAttrs.Height);\r\n    \r\n          console.log(newAttrs);\r\n          setRectangles(rects);\r\n          setSelectedShape(newAttrs);\r\n        }\r\n        }\r\n      />\r\n    );\r\n  }\r\n\r\n  return (\r\n    <CanvasStyle>\r\n    <Stage\r\n    width={imageWidth/2} \r\n    height={imageHeight/2} \r\n    scaleX={0.5} \r\n    scaleY={0.5}\r\n      onMouseDown={checkDeselect}\r\n      onTouchStart={checkDeselect}\r\n    >\r\n      <Layer>\r\n      <Image image={image} ref={imageRef}\r\n        width={imageWidth} height={imageHeight}\r\n        stroke= {'red'} strokeWidth ={10}\r\n         x={0} y={0} />\r\n\r\n      {rectangles && \r\n        GetAllShapes(rectangles)\r\n      }     \r\n      </Layer>\r\n    </Stage>\r\n    </CanvasStyle>\r\n  );\r\n};\r\n\r\nexport default Canvas;\r\n","C:\\Dev\\Zap\\zap-document-designer\\src\\Component\\Properties.js",["86","87"],"import React, { useState, useEffect } from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { Form, Row, Col } from 'react-bootstrap';\r\nimport styled from 'styled-components';\r\n\r\nimport './../App.css';\r\n\r\nexport const Container = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n`\r\n\r\nconst ControlProperties = ({item, onChange}) => {\r\n\r\n  const GroupCoordinate = (prop, label, placeholder = \"\") => {\r\n    let value = item && item.Coordinate && item.Coordinate[prop];\r\n        if (placeholder === \"\") placeholder = label;\r\n        return(\r\n            \r\n            <Form.Group as={Row} controlId={prop}>\r\n                {console.log(\"Coordinates\")}\r\n                {console.log(item )}\r\n              <Form.Label column=\"sm\" lg={2} >\r\n              {label}\r\n              </Form.Label>\r\n              <Col sm={10}>\r\n                <Form.Control size=\"sm\" type=\"Text\" \r\n                placeholder={placeholder} \r\n                value={value?? ''}\r\n                onChange={(e) => onChange(prop, e.target.value)} />\r\n              </Col>\r\n            </Form.Group>\r\n            );\r\n}\r\n\r\nconst GroupFont = (prop, label, placeholder = \"\") => {\r\n  let value = item && item.Font && item.Font[prop];\r\n  // item?.font === undefined ? \"\" : item.font[prop];\r\n  if (placeholder === \"\") placeholder = label;\r\n      return(\r\n          <Form.Group as={Row} controlId={prop}>\r\n            <Form.Label column=\"sm\" lg={2} >\r\n            {label}\r\n            </Form.Label>\r\n            <Col sm={10}>\r\n              <Form.Control size=\"sm\" type=\"Text\" \r\n              placeholder={placeholder} \r\n              value={value?? ''}\r\n              onChange={(e) => onChange(prop, e.target.value)} />\r\n            </Col>\r\n          </Form.Group>\r\n          );\r\n}\r\n\r\n    const Group = (prop, label, placeholder = \"\") => {\r\n      let value = item && item[prop];\r\n        if (placeholder === \"\") placeholder = label;\r\n            return(\r\n                <Form.Group as={Row} controlId={prop}>\r\n                  <Form.Label column=\"sm\" lg={2} >\r\n                  {label}\r\n                  </Form.Label>\r\n                  <Col sm={10}>\r\n                    <Form.Control size=\"sm\" type=\"Text\" \r\n                    placeholder={placeholder} \r\n                    value={value?? ''}\r\n                    onChange={(e) => onChange(prop, e.target.value)} />\r\n                  </Col>\r\n                </Form.Group>\r\n                );\r\n    }\r\n\r\n  return (\r\n        \r\n            <Form>\r\n                <Container>\r\n       \r\n                    {Group(\"Id\", \"ID\")}\r\n                    {Group(\"ParentId\", \"Parent ID\")}\r\n                    {Group(\"DisplayText\", \"Diplay Text\")}\r\n\r\n                    {GroupCoordinate(\"X1\", \"X1\",\"X1 Coordinate\")}\r\n                    {GroupCoordinate(\"Y1\", \"Y1\",\"Y1 Coordinate\")}\r\n                    {GroupCoordinate(\"X2\", \"X2\",\"X2 Coordinate\")}\r\n                    {GroupCoordinate(\"Y2\", \"Y2\",\"Y2 Coordinate\")}\r\n                    \r\n                    {GroupFont(\"Type\", \"Font Type\")}\r\n                    {GroupFont(\"Size\", \"Font Size\")}\r\n\r\n                    {Group(\"Width\", \"Width\")}\r\n                    {Group(\"Height\", \"Height\")}\r\n                    {Group(\"X\", \"X\")}\r\n                    {Group(\"Y\", \"Y\")}\r\n                    \r\n                    {Group(\"NodeName\", \"Title\")}\r\n                    {Group(\"Alignment\", \"Alignment\")}\r\n                    {Group(\"RotateAngle\", \"RotateAngle\")}\r\n                </Container>\r\n            </Form>\r\n       \r\n  );\r\n};\r\n\r\nexport default ControlProperties;","C:\\Dev\\Zap\\zap-document-designer\\src\\Component\\Tree.js",["88","89","90"],"import React, { useState, useEffect } from 'react';\r\nimport styled from 'styled-components';\r\nimport { AwesomeButton } from \"react-awesome-button\";\r\nimport \"react-awesome-button/dist/styles.css\";\r\n\r\nimport TreeMenu , { defaultChildren, ItemComponent } from 'react-simple-tree-menu';\r\nimport 'react-simple-tree-menu/dist/main.css';\r\n\r\nexport const TreeStyle = styled.div`\r\n    \r\n    max-height:100%;\r\n    overflow-y:auto;\r\n\r\n    .ul {\r\n        list-style-type:none;\r\n        margin:0;\r\n        padding:0;\r\n    }\r\n\r\n    .li {\r\n        Display: flex;\r\n        margin:0;\r\n        padding:0;\r\n    \r\n        .cancelBtn {\r\n            border-radius: 50%;\r\n            background: yellow;\r\n        }\r\n    }\r\n`\r\n\r\n\r\nconst Tree = ({treeData, selectedShape, treeOpenNodes, \r\n    handleAddItemToTreeNode, handleAddContainerToTreeNode,\r\n    handleTreeViewClick, handleDeleteItemfromTree}) => {\r\n\r\n\r\n    return(\r\n        <TreeStyle>\r\n        <TreeMenu data={treeData} hasSearch={true}\r\n        onClickItem={({ key, label, ...props }) => {\r\n           handleTreeViewClick(key);   \r\n      }}\r\n      activeKey={selectedShape?.NavigationKey ?? ''}\r\n      openNodes={treeOpenNodes}   \r\n    >                       \r\n        {({ search, items, resetOpenNodes }) => (\r\n            <>\r\n            <AwesomeButton\r\n            type=\"primary\"\r\n            ripple\r\n            onPress={() => {\r\n                handleAddItemToTreeNode();\r\n            }}\r\n            >\r\n            Add Item\r\n        </AwesomeButton>\r\n        <AwesomeButton\r\n            type=\"primary\"\r\n            ripple\r\n            onPress={() => {\r\n                handleAddContainerToTreeNode();\r\n            }}\r\n            >\r\n            Add Container\r\n        </AwesomeButton>\r\n        <AwesomeButton\r\n            type=\"primary\"\r\n            ripple\r\n            onPress={resetOpenNodes}\r\n            >\r\n            reset \r\n        </AwesomeButton>\r\n        <input onChange={e => search(e.target.value)} placeholder=\"Type and search\" />\r\n            <ul className=\"ul\">\r\n                {items.map(({key, ...props}) => (\r\n                <span key={key} className=\"li\">\r\n                    <ItemComponent key={key} {...props} />\r\n                   \r\n                    <AwesomeButton \r\n                    id = {key}\r\n                        type=\"primary\"\r\n                        ripple\r\n                        onPress={() => {\r\n                            console.log(\"x\");\r\n                            console.log(key);\r\n                            handleDeleteItemfromTree(key);\r\n                        }}\r\n                        >\r\n                        x\r\n                    </AwesomeButton>\r\n                \r\n                </span>\r\n                ))}\r\n            </ul>\r\n            </>\r\n        )}\r\n    </TreeMenu>\r\n    </TreeStyle>\r\n    );\r\n}\r\n\r\nexport default Tree;","C:\\Dev\\Zap\\zap-document-designer\\src\\Component\\Header.js",["91","92","93","94","95","96","97","98","99","100","101"],"import React, { useState, useEffect } from 'react';\r\nimport styled from 'styled-components';\r\nimport { AwesomeButton } from \"react-awesome-button\";\r\nimport Modal from \"./Model\";\r\nimport ReactFileReader from 'react-file-reader';\r\nimport FileSaver from 'file-saver';\r\nimport X2JS from 'x2js';\r\nimport Template from '../Data/Template';\r\nimport Layout from '../Data/Layout';\r\nimport _ from 'lodash';\r\n\r\nexport const ScrollerStyle = styled.div`\r\n    margin: 0 auto;\r\n    height: 300px;\r\n    width: 500px;\r\n    overflow: auto;\r\n\r\n    .item {\r\n        margin: 30px 0;\r\n        Display: flex;\r\n        justify-content: flex-start;\r\n\r\n        img {\r\n\r\n        }\r\n\r\n        .name {\r\n\r\n        }\r\n\r\n        .button{\r\n\r\n        }\r\n    }\r\n`\r\nconst Scroller = ({children}) => {\r\n    return (<ScrollerStyle>{children}</ScrollerStyle> );\r\n}\r\n\r\nexport const HeaderStyle = styled.div`\r\n    height: 50px;\r\n    background: pink;\r\n    Display: flex;\r\n\r\n    .select{\r\n        width:200px;\r\n    }\r\n`\r\nconst attrConst= [  {Originalkey: \"$formatting\", newKey: \"Formatting\"},\r\n                    {Originalkey: \"$nodeName\", newKey: \"NodeName\"},\r\n                    {Originalkey: \"$alignment\", newKey: \"Alignment\"},\r\n                    {Originalkey: \"$wordWrap\", newKey: \"WordWrap\"},\r\n                    {Originalkey: \"$type\", newKey: \"Type\"},\r\n                    {Originalkey: \"$lastPageOnly\", newKey: \"LastPageOnly\"},\r\n                    {Originalkey: \"$newLine\", newKey: \"NewLine\"},\r\n                    {Originalkey: \"$specialStartNewLine\", newKey: \"SpecialStartNewLine\"},\r\n                    {Originalkey: \"$activateSpecialStartNewLine\", newKey: \"ActivateSpecialStartNewLine\"},\r\n                    {Originalkey: \"$alwaysNewLine\", newKey: \"AlwaysNewLine\"},\r\n                    {Originalkey: \"$section\", newKey: \"Section\"}];\r\n\r\nconst Header = ({templateName, setTemplateName,\r\n                 setError, setImageBase64, setLayout,\r\n                  version, layout, items,\r\n                isTemplateNew, isDirty, isNewVersion,\r\n                handleOnLoad, handleAddNewVersion, handleCreateNewTemplate,handlePresistance\r\n                }) => {\r\n    const [templates, setTemplates] =  useState([]);  \r\n    const [uploadLayout, setUploadLayout] = useState([]);\r\n    const [name, setName] =  useState(templateName);    \r\n    const [attrs, setAttrs] = useState(attrConst);         \r\n    const modalRef = React.useRef();\r\n\r\n    const openModal = () => {\r\n        modalRef.current.openModal()\r\n        GetAllTemplate();\r\n    };\r\n\r\n    const closeModal = () => {\r\n        modalRef.current.close()\r\n    };\r\n\r\n    useEffect(() => {\r\n        setTemplateName(name);\r\n     }, [name]);\r\n\r\n     useEffect(() => {\r\n        setLayout(uploadLayout);\r\n     }, [uploadLayout]);\r\n\r\n     useEffect(() => {\r\n        console.log(attrs);\r\n     }, [attrs]);\r\n\r\n    const GetAllTemplate = () => {\r\n        Template.getDataList()\r\n        .then(response => {\r\n            let templates = response.data\r\n\r\n            setTemplates(templates);\r\n            console.log(templates);\r\n            setError(\"\");\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n              setError(\"Failure \"+ err.response.status);\r\n            } else if (err.request) {\r\n                setError(\"client never received a response, or request never left\");\r\n            } else {\r\n              // anything else\r\n            }\r\n        })\r\n      }\r\n\r\n      const BASE64_MARKER = ';base64,';\r\n\r\n      const handleUploadTemplate = (file) => {\r\n        var base64Index = file.base64.indexOf(BASE64_MARKER) + BASE64_MARKER.length;\r\n        var base64 = file.base64.substring(base64Index);\r\n          let x = file.base64;\r\n        var decodedString = atob(base64);\r\n        console.log(decodedString);\r\n        var x2js = new X2JS({\r\n            attributePrefix : \"$\"\r\n        });\r\n        var jsonObj = x2js.xml2js( decodedString );\r\n        console.log(jsonObj);\r\n\r\n        let newObj = objectKeysToFirstCapital(jsonObj);\r\n\r\n        console.log(attrs);\r\n\r\n        let newItems = applyAttribute(newObj?.Settings?.CellData?? []);\r\n        newObj.Settings.CellData = newItems;\r\n\r\n        let l = {\r\n            Setting : { \r\n                CellData : newItems,\r\n                Page : newObj.Settings.Page,\r\n            },\r\n            Version : 0\r\n        };\r\n        console.log(l);\r\n\r\n        setUploadLayout(l);\r\n      }\r\n\r\n      const applyAttribute = (items) => {\r\n        let id = 1;\r\n        let newItem =  Object.values(items).map((cell) => {\r\n           cell.Id = id++;\r\n           cell.ParentId = 0;\r\n           cell.Stroke = \"red\";\r\n           cell.StrokeWidth = 6;\r\n           cell.NavigationKey = cell.Id.toString();\r\n           ApplyCoordinate(cell);\r\n           if (cell.SubData !== undefined && cell.SubData !== null && (!_.isEmpty(cell.SubData))) {\r\n               let SubData = cell.SubData;\r\n               SubData.Id = id++;\r\n               SubData.ParentId = cell.Id;\r\n               SubData.Stroke = \"yellow\";\r\n               SubData.StrokeWidth = 6;\r\n               SubData.NavigationKey = cell.NavigationKey.toString() + \"/\" + SubData.Id.toString();\r\n               SubData.Coordinate.Y1 = cell.Coordinate.Y1;\r\n               SubData.Coordinate.Y2 = cell.Coordinate.Y2;\r\n               ApplyCoordinate(SubData);\r\n               if (cell.SubData.SubData !== undefined && cell.SubData.SubData !== null && (!_.isEmpty(cell.SubData.SubData))) {\r\n                 Object.values(cell.SubData.SubData).map((cellSub) => {\r\n                     cellSub.Id = id++;\r\n                     cellSub.ParentId = SubData.Id;\r\n                     cellSub.Stroke = \"green\";\r\n                     cellSub.StrokeWidth = 6; \r\n                     cellSub.NavigationKey = SubData.NavigationKey.toString() + \"/\" + cellSub.Id.toString();\r\n                     cellSub.Coordinate.Y1 = cell.SubData.Coordinate.Y1;\r\n                     cellSub.Coordinate.Y2 = cell.SubData.Coordinate.Y2;\r\n                     ApplyCoordinate(cellSub);\r\n                       return cell;\r\n                   })\r\n               }\r\n               cell.SubData = SubData?? null;\r\n           }\r\n           return cell;\r\n         });\r\n         return newItem;\r\n       }\r\n        \r\n    const ApplyCoordinate = (cell) => {\r\n        cell.X = Math.abs(cell.Coordinate.X1 * 1);\r\n        cell.Y = Math.abs(cell.Coordinate.Y1 * 1);\r\n        cell.Width =  Math.abs(cell.Coordinate['X1'] * 1 - cell.Coordinate['X2'] * 1);\r\n        cell.Height = Math.abs(cell.Coordinate['Y1'] * 1 - cell.Coordinate['Y2'] * 1);\r\n    }\r\n\r\n      let objectKeysToFirstCapital = function (origObj) {\r\n        return Object.keys(origObj).reduce(function (newObj, key) {\r\n            let val = origObj[key];\r\n           // let newVal = (typeof val === 'object') ? objectKeysToFirstCapital(val) : val;\r\n           let newVal = (typeof val === 'object') ?\r\n           Array.isArray(val) ? Object.values(objectKeysToFirstCapital(val)) : objectKeysToFirstCapital(val) \r\n           : val;\r\n            if (key === 'coordinates') key = 'coordinate';\r\n            let newKey = jsUcfirst(key);\r\n\r\n            console.log(key.indexOf('$'));\r\n            if (key.indexOf('$') !== -1) {\r\n                \r\n                if (attrs.findIndex( ({ Originalkey }) => Originalkey === key) === -1){\r\n                   // let arr = [...attrs.list, {key, newKey}];\r\n                   // arr.push({key, newKey});\r\n                   attrs.push({Originalkey : key, newKey : newKey});\r\n                    setAttrs(attrs);\r\n                }\r\n            }\r\n            console.log(attrs);\r\n            newObj[newKey] = newVal;\r\n            return newObj;\r\n        }, {});\r\n    }\r\n        function jsUcfirst(string) \r\n        {\r\n            if (string.indexOf('$') !== -1) \r\n                string = string.slice(1);\r\n            return string.charAt(0).toUpperCase() + string.slice(1);\r\n        } \r\n\r\n        const cleanEmpty = obj => {\r\n            if (Array.isArray(obj)) { \r\n              return obj\r\n                  .map(v => (v && typeof v === 'object') ? cleanEmpty(v) : v)\r\n                  .filter(v => !(v == null)); \r\n            } else { \r\n              return Object.entries(obj)\r\n                  .map(([k, v]) => [k, v && typeof v === 'object' ? cleanEmpty(v) : v])\r\n                  .reduce((a, [k, v]) => (v == null ? a : (a[k]=v, a)), {});\r\n            } \r\n          }\r\n\r\n      let objectKeysToFirstLower = function (origObj) {\r\n        let obj =  Object.keys(origObj).reduce(function (newObj, key) {\r\n            let val = origObj[key];\r\n            if(val === null) return; \r\n            let newVal = (typeof val === 'object') ?\r\n            Array.isArray(val) ? Object.values(objectKeysToFirstLower(val)) : objectKeysToFirstLower(val) \r\n            : val;\r\n            if (key === 'Coordinate') key = 'coordinates';\r\n            let newKey = jsLcfirst(key);\r\n\r\n            if (attrs.findIndex( ({ newKey }) => newKey === key) !== -1){\r\n                newKey = '$' + newKey;\r\n            }\r\n           \r\n            console.log(attrs);\r\n            newObj[newKey] = newVal;\r\n            return newObj;\r\n        }, {});\r\n\r\n        let revisedObj =  deletObject(obj);\r\n        return revisedObj;\r\n    }\r\n        function jsLcfirst(string) \r\n        {\r\n            // if (string.indexOf('$') !== -1) \r\n            //     string = string.slice(1);\r\n            return string.charAt(0).toLowerCase() + string.slice(1);\r\n        } \r\n\r\n        function deletObject(v) {\r\n                delete v.id \r\n                delete v.parentId\r\n                delete v.stroke\r\n                delete v.strokeWidth\r\n                delete v.width\r\n                delete v.height\r\n                delete v.x\r\n                delete v.y\r\n                delete v.navigationKey\r\n\r\n                return v;\r\n        }\r\n\r\n        const getXMLfromObject = (settings) => {\r\n       \r\n            var x2js = new X2JS({\r\n                attributePrefix : \"$\"\r\n            });\r\n    \r\n            let x = objectKeysToFirstLower(settings);\r\n    \r\n            var xmlObj = x2js.js2xml( x );\r\n            console.log(xmlObj);\r\n    \r\n            return xmlObj;\r\n    \r\n    \r\n            // let x = objectKeysToFirstLower(items);\r\n            // let newObj = Object.values(x);\r\n    \r\n            // var settings = {\r\n            //     settings : {\r\n            //         cellData :newObj,\r\n            //         page : page\r\n            //     }\r\n            // }\r\n    \r\n            // var x2js = new X2JS({\r\n            //     attributePrefix : \"$\"\r\n            // });\r\n    \r\n            // var xmlObj = x2js.js2xml( settings );\r\n            // console.log(xmlObj);\r\n    \r\n            // return xmlObj;\r\n        }\r\n        \r\n    //   const handleFileSave = () => {\r\n    //     var x2js = new X2JS({\r\n    //         attributePrefix : \"$\"\r\n    //     });\r\n\r\n    //     // var settings = {\r\n    //     //     settings : {\r\n    //     //         cellData :items,\r\n    //     //         page : layout.Setting.Page\r\n    //     //     }\r\n    //     // }\r\n\r\n    //      let x = objectKeysToFirstLower(items);\r\n    //     // let newObj = Object.values(x);\r\n\r\n\r\n    //     var settings = {\r\n    //         settings : {\r\n    //             cellData :x,\r\n    //             page : layout.Setting.Page\r\n    //         }\r\n    //     }\r\n\r\n    //     var xmlObj = x2js.js2xml( settings );\r\n    //     console.log(xmlObj);\r\n\r\n    //     var blob = new Blob([xmlObj], {type: \"xml/plain;charset=utf-8\"});\r\n    //     FileSaver.saveAs(blob, \"template.xml\");\r\n    //   }\r\n\r\n\r\n      const handleFileSave = () => {\r\n        var settings = {\r\n            settings : {\r\n                cellData : [ ...items],\r\n                page : layout.Setting.Page?? {X:0,Y:0}\r\n            }\r\n        }\r\n        var xmlObj = getXMLfromObject(cleanEmpty(settings));\r\n\r\n        var blob = new Blob([xmlObj], {type: \"xml/plain;charset=utf-8\"});\r\n        FileSaver.saveAs(blob, \"template.xml\");\r\n      }\r\n\r\n    //   useEffect(() => {\r\n    //     console.log(name);\r\n    //     setTemplateName(name);\r\n    //  }, [name]);\r\n\r\n    return (\r\n        <React.Fragment> \r\n                 <HeaderStyle>\r\n                <h1>Designer</h1>\r\n                \r\n                    {/* <input \r\n                    value = {name}\r\n                    onChange={e => {\r\n                    \r\n                        setName(e.target.value);\r\n                    \r\n                    }} \r\n                    placeholder=\"Type and search\"\r\n                    disabled = {!isTemplateNew} \r\n                    /> */}\r\n                \r\n                \r\n                {/* <AwesomeButton\r\n                    type=\"primary\"\r\n                    ripple\r\n                    onPress={() => {\r\n                        handleCreateNewTemplate();\r\n                    }}\r\n                    >\r\n                    New\r\n                </AwesomeButton> */}\r\n                {true  &&\r\n                <ReactFileReader base64={true} handleFiles={ (file) => setImageBase64(file.base64)} fileTypes={[\".tif\"]}>\r\n                    <AwesomeButton\r\n                    type=\"primary\"\r\n                    ripple\r\n                    >\r\n                    Upload Image\r\n                    </AwesomeButton>\r\n                </ReactFileReader>\r\n                }\r\n                {true  &&\r\n                <ReactFileReader base64={true} handleFiles={ (file) => handleUploadTemplate(file)} fileTypes={[\".xml\"]}>\r\n                    <AwesomeButton\r\n                    type=\"primary\"\r\n                    ripple\r\n                    >\r\n                    Upload Template\r\n                    </AwesomeButton>\r\n                </ReactFileReader>\r\n                }\r\n                {/* <AwesomeButton\r\n                    type=\"primary\"\r\n                    ripple\r\n                    onPress={() => {\r\n                        openModal();\r\n                    }}\r\n                    >\r\n                    Find\r\n                </AwesomeButton>\r\n                \r\n                <Modal ref={modalRef}>\r\n                    <h1>Please Select ur Template</h1>\r\n                        {templates && \r\n                          <Scroller>\r\n                          {templates.map(({ Id, Name, Base64Thumbnail }) => {\r\n                            return (\r\n                                <div className=\"item\">\r\n                                  <img src={Base64Thumbnail} />\r\n                                  <span className=\"name\">{Name}</span>\r\n                                  <AwesomeButton\r\n                                  className=\"button\"\r\n                                    type=\"primary\"\r\n                                    ripple\r\n                                    onPress={() => {\r\n                                        handleOnLoad(Id);\r\n                                        closeModal();\r\n                                    }}\r\n                                    >\r\n                                    Select\r\n                                </AwesomeButton>\r\n                                </div>\r\n                            );\r\n                          })}\r\n                        </Scroller>\r\n                        }\r\n                    \r\n                    <AwesomeButton\r\n                    type=\"primary\"\r\n                    ripple\r\n                    onPress={() => {\r\n                        closeModal();\r\n                    }}\r\n                    >\r\n                    Close\r\n                </AwesomeButton>\r\n                   \r\n                </Modal>\r\n                {isTemplateNew? \"true\" : \"false\"}\r\n                    {isDirty? \"true\" : \"false\"}\r\n                {(!isTemplateNew) && isDirty && (!isNewVersion) &&\r\n                <AwesomeButton\r\n                    type=\"primary\"\r\n                    ripple\r\n                    onPress={() => {\r\n                        handleAddNewVersion();\r\n                    }}\r\n                    >\r\n                    Add Version\r\n                </AwesomeButton>\r\n                }\r\n                \r\n                {(!isTemplateNew) && version &&\r\n                <span>{isNewVersion ? \"New Version\" : \"Version \" + version?? \"0\"}</span>\r\n                }\r\n                \r\n                {isDirty &&\r\n                <AwesomeButton\r\n                    type=\"primary\"\r\n                    ripple\r\n                    onPress={() => {\r\n                        handlePresistance();\r\n                    }}\r\n                    >\r\n                    {isTemplateNew ? \"Create\" : \"Save\"  }\r\n                </AwesomeButton>\r\n                } */}\r\n\r\n                {isDirty &&\r\n                <AwesomeButton\r\n                    type=\"primary\"\r\n                    ripple\r\n                    onPress={() => {\r\n                        handleFileSave();\r\n                    }}\r\n                    >\r\n                    SaveToFile\r\n                </AwesomeButton>\r\n                }\r\n            </HeaderStyle>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default Header;","C:\\Dev\\Zap\\zap-document-designer\\src\\Data\\Layout.js",["102"],"import axios from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'http://localhost:64909/',\r\n});\r\nexport default {\r\n    getDataList: () =>\r\n    instance({\r\n        'method':'GET',\r\n        'url':'/api/Layout/'\r\n    }),\r\n    getData: (id) =>\r\n    instance({\r\n        'method':'GET',\r\n        'url':'/api/Layout/' + id\r\n    }),\r\n    postData: (data) =>\r\n    instance({\r\n        'method': 'POST',\r\n        'url':'/api/Layout/',\r\n        'data':data\r\n    })\r\n}","C:\\Dev\\Zap\\zap-document-designer\\src\\Data\\Template.js",["103"],"import axios from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'http://localhost:64909/',\r\n});\r\nexport default {\r\n    getDataList: () =>\r\n    instance({\r\n        'method':'GET',\r\n        'url':'/api/Template/'\r\n    }),\r\n    getData: (id) =>\r\n    instance({\r\n        'method':'GET',\r\n        'url':'/api/Template/' + id\r\n    }),\r\n    getCurrentLayoutData: (id) =>\r\n    instance({\r\n        'method':'GET',\r\n        'url':'/api/Template/CurrentLayout/' + id\r\n    }),\r\n    postData: (data) =>\r\n    instance({\r\n        'method': 'POST',\r\n        'url':'/api/Template/',\r\n        'data':data\r\n    })\r\n}","C:\\Dev\\Zap\\zap-document-designer\\src\\Component\\Rectangle.js",["104","105","106"],"import React from 'react';\r\nimport { render } from 'react-dom';\r\nimport { Stage, Layer, Rect, Transformer } from 'react-konva';\r\n\r\nconst Rectangle = ({ shapeProps, isSelected, onSelect, onChange }) => {\r\n  const shapeRef = React.useRef();\r\n  const trRef = React.useRef();\r\n\r\n  React.useEffect(() => {\r\n    if (isSelected) {\r\n        console.log(\"isSelected\");\r\n      // we need to attach transformer manually\r\n      //trRef.current.setNode(shapeRef.current);\r\n      trRef.current.setNodes([shapeRef.current]);\r\n      trRef.current.getLayer().batchDraw();\r\n    }\r\n  }, [isSelected]);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Rect\r\n        onClick={onSelect}\r\n        onTap={onSelect}\r\n        ref={shapeRef}\r\n        {...shapeProps}\r\n        draggable\r\n        onDragEnd={e => {\r\n          console.log(\"onChange 1\" +  e.target.x() + \" \" +  e.target.y() + \" \" + e.target.width() + \" \" + e.target.height());\r\n           onChange({\r\n            ...shapeProps,\r\n            X: Math.abs( Math.floor(e.target.x())),\r\n            Y: Math.abs( Math.floor(e.target.y())),\r\n            Width: Math.abs(Math.floor(e.target.width())),\r\n            Height: Math.abs(Math.floor(e.target.height())),\r\n            rotation: e.target.rotation()\r\n          }); \r\n          console.log(\"onChange 2\" +  Math.abs( Math.floor(e.target.x())) + \" \" +  Math.abs( Math.floor(e.target.y()))+ \" \" + e.target.width() + \" \" + e.target.height());\r\n        }} \r\n        onTransformEnd={e => {\r\n          // transformer is changing scale of the node\r\n          // and NOT its width or height\r\n          // but in the store we have only width and height\r\n          // to match the data better we will reset scale on transform end\r\n          console.log(\"transform\");\r\n          const node = shapeRef.current;\r\n          const scaleX = node.scaleX();\r\n          const scaleY = node.scaleY();\r\n\r\n          // we will reset it back\r\n          node.scaleX(1);\r\n          node.scaleY(1);\r\n           onChange({\r\n            ...shapeProps,\r\n            X: Math.abs(Math.floor(node.x())),\r\n            Y: Math.abs(Math.floor(node.y())),\r\n            // set minimal value\r\n            Width: Math.floor(Math.max(5, node.width() * scaleX)),\r\n            Height: Math.floor(Math.max(node.height() * scaleY)),\r\n            rotation: node.rotation()\r\n          }); \r\n        }}\r\n      />\r\n      {isSelected && (\r\n        <Transformer\r\n          ref={trRef}\r\n          boundBoxFunc={(oldBox, newBox) => {\r\n            // limit resize\r\n            if (newBox.Width < 5 || newBox.Height < 5) {\r\n              return oldBox;\r\n            }\r\n            return newBox;\r\n          }}\r\n        />\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Rectangle;\r\n\r\n\r\n","C:\\Dev\\Zap\\zap-document-designer\\src\\Component\\Model.js",[],["107","108"],{"ruleId":"109","replacedBy":"110"},{"ruleId":"111","replacedBy":"112"},{"ruleId":"113","severity":1,"message":"114","line":2,"column":8,"nodeType":"115","messageId":"116","endLine":2,"endColumn":12},{"ruleId":"113","severity":1,"message":"117","line":8,"column":8,"nodeType":"115","messageId":"116","endLine":8,"endColumn":21},{"ruleId":"113","severity":1,"message":"118","line":12,"column":8,"nodeType":"115","messageId":"116","endLine":12,"endColumn":16},{"ruleId":"113","severity":1,"message":"119","line":12,"column":21,"nodeType":"115","messageId":"116","endLine":12,"endColumn":36},{"ruleId":"113","severity":1,"message":"120","line":12,"column":38,"nodeType":"115","messageId":"116","endLine":12,"endColumn":51},{"ruleId":"121","severity":1,"message":"122","line":98,"column":8,"nodeType":"123","endLine":98,"endColumn":18,"suggestions":"124"},{"ruleId":"125","severity":1,"message":"126","line":107,"column":26,"nodeType":"127","messageId":"128","endLine":107,"endColumn":28},{"ruleId":"121","severity":1,"message":"129","line":109,"column":9,"nodeType":"123","endLine":109,"endColumn":16,"suggestions":"130"},{"ruleId":"131","severity":1,"message":"132","line":157,"column":22,"nodeType":"133","messageId":"134","endLine":157,"endColumn":24},{"ruleId":"113","severity":1,"message":"135","line":161,"column":17,"nodeType":"115","messageId":"116","endLine":161,"endColumn":25},{"ruleId":"131","severity":1,"message":"132","line":191,"column":17,"nodeType":"133","messageId":"134","endLine":191,"endColumn":19},{"ruleId":"131","severity":1,"message":"132","line":198,"column":26,"nodeType":"133","messageId":"134","endLine":198,"endColumn":28},{"ruleId":"131","severity":1,"message":"132","line":207,"column":37,"nodeType":"133","messageId":"134","endLine":207,"endColumn":39},{"ruleId":"113","severity":1,"message":"136","line":339,"column":13,"nodeType":"115","messageId":"116","endLine":339,"endColumn":24},{"ruleId":"113","severity":1,"message":"137","line":349,"column":13,"nodeType":"115","messageId":"116","endLine":349,"endColumn":17},{"ruleId":"113","severity":1,"message":"138","line":3,"column":24,"nodeType":"115","messageId":"116","endLine":3,"endColumn":28},{"ruleId":"113","severity":1,"message":"139","line":3,"column":30,"nodeType":"115","messageId":"116","endLine":3,"endColumn":34},{"ruleId":"113","severity":1,"message":"140","line":4,"column":8,"nodeType":"115","messageId":"116","endLine":4,"endColumn":13},{"ruleId":"121","severity":1,"message":"141","line":23,"column":5,"nodeType":"123","endLine":23,"endColumn":18,"suggestions":"142"},{"ruleId":"113","severity":1,"message":"143","line":83,"column":10,"nodeType":"115","messageId":"116","endLine":83,"endColumn":32},{"ruleId":"113","severity":1,"message":"144","line":89,"column":7,"nodeType":"115","messageId":"116","endLine":89,"endColumn":13},{"ruleId":"131","severity":1,"message":"132","line":118,"column":22,"nodeType":"133","messageId":"134","endLine":118,"endColumn":24},{"ruleId":"131","severity":1,"message":"132","line":124,"column":40,"nodeType":"133","messageId":"134","endLine":124,"endColumn":42},{"ruleId":"113","severity":1,"message":"145","line":1,"column":17,"nodeType":"115","messageId":"116","endLine":1,"endColumn":25},{"ruleId":"113","severity":1,"message":"146","line":1,"column":27,"nodeType":"115","messageId":"116","endLine":1,"endColumn":36},{"ruleId":"113","severity":1,"message":"145","line":1,"column":17,"nodeType":"115","messageId":"116","endLine":1,"endColumn":25},{"ruleId":"113","severity":1,"message":"146","line":1,"column":27,"nodeType":"115","messageId":"116","endLine":1,"endColumn":36},{"ruleId":"113","severity":1,"message":"119","line":6,"column":21,"nodeType":"115","messageId":"116","endLine":6,"endColumn":36},{"ruleId":"113","severity":1,"message":"147","line":4,"column":8,"nodeType":"115","messageId":"116","endLine":4,"endColumn":13},{"ruleId":"113","severity":1,"message":"148","line":9,"column":8,"nodeType":"115","messageId":"116","endLine":9,"endColumn":14},{"ruleId":"113","severity":1,"message":"149","line":36,"column":7,"nodeType":"115","messageId":"116","endLine":36,"endColumn":15},{"ruleId":"113","severity":1,"message":"150","line":67,"column":12,"nodeType":"115","messageId":"116","endLine":67,"endColumn":21},{"ruleId":"113","severity":1,"message":"151","line":69,"column":18,"nodeType":"115","messageId":"116","endLine":69,"endColumn":25},{"ruleId":"113","severity":1,"message":"152","line":73,"column":11,"nodeType":"115","messageId":"116","endLine":73,"endColumn":20},{"ruleId":"113","severity":1,"message":"153","line":78,"column":11,"nodeType":"115","messageId":"116","endLine":78,"endColumn":21},{"ruleId":"121","severity":1,"message":"154","line":84,"column":9,"nodeType":"123","endLine":84,"endColumn":15,"suggestions":"155"},{"ruleId":"121","severity":1,"message":"156","line":88,"column":9,"nodeType":"123","endLine":88,"endColumn":23,"suggestions":"157"},{"ruleId":"113","severity":1,"message":"158","line":119,"column":15,"nodeType":"115","messageId":"116","endLine":119,"endColumn":16},{"ruleId":"131","severity":1,"message":"159","line":240,"column":30,"nodeType":"160","messageId":"161","endLine":240,"endColumn":37},{"ruleId":"162","severity":1,"message":"163","line":6,"column":1,"nodeType":"164","endLine":23,"endColumn":2},{"ruleId":"162","severity":1,"message":"163","line":6,"column":1,"nodeType":"164","endLine":28,"endColumn":2},{"ruleId":"113","severity":1,"message":"165","line":2,"column":10,"nodeType":"115","messageId":"116","endLine":2,"endColumn":16},{"ruleId":"113","severity":1,"message":"166","line":3,"column":10,"nodeType":"115","messageId":"116","endLine":3,"endColumn":15},{"ruleId":"113","severity":1,"message":"167","line":3,"column":17,"nodeType":"115","messageId":"116","endLine":3,"endColumn":22},{"ruleId":"109","replacedBy":"168"},{"ruleId":"111","replacedBy":"169"},"no-native-reassign",["170"],"no-negated-in-lhs",["171"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'ImageUploader' is defined but never used.","'TreeMenu' is defined but never used.","'defaultChildren' is defined but never used.","'ItemComponent' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'handleIsDirty'. Either include it or remove the dependency array.","ArrayExpression",["172"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","React Hook useEffect has missing dependencies: 'convertToTreeDate' and 'handleIsDirty'. Either include them or remove the dependency array.",["173"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'SubNodes' is assigned a value but never used.","'handleFiles' is assigned a value but never used.","'item' is assigned a value but never used.","'Rect' is defined but never used.","'Text' is defined but never used.","'Konva' is defined but never used.","React Hook useEffect has a missing dependency: 'selectBackGroundImage'. Either include it or remove the dependency array.",["174"],"'convertDataURIToBinary' is defined but never used.","'arrayU' is assigned a value but never used.","'useState' is defined but never used.","'useEffect' is defined but never used.","'Modal' is defined but never used.","'Layout' is defined but never used.","'Scroller' is assigned a value but never used.","'templates' is assigned a value but never used.","'setName' is assigned a value but never used.","'openModal' is assigned a value but never used.","'closeModal' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'setTemplateName'. Either include it or remove the dependency array. If 'setTemplateName' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["175"],"React Hook useEffect has a missing dependency: 'setLayout'. Either include it or remove the dependency array. If 'setLayout' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["176"],"'x' is assigned a value but never used.","Array.prototype.reduce() expects a return value from function.","ReturnStatement","expectedReturnValue","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'render' is defined but never used.","'Stage' is defined but never used.","'Layer' is defined but never used.",["170"],["171"],"no-global-assign","no-unsafe-negation",{"desc":"177","fix":"178"},{"desc":"179","fix":"180"},{"desc":"181","fix":"182"},{"desc":"183","fix":"184"},{"desc":"185","fix":"186"},"Update the dependencies array to be: [handleIsDirty, template]",{"range":"187","text":"188"},"Update the dependencies array to be: [convertToTreeDate, handleIsDirty, items]",{"range":"189","text":"190"},"Update the dependencies array to be: [imageBase64, selectBackGroundImage]",{"range":"191","text":"192"},"Update the dependencies array to be: [name, setTemplateName]",{"range":"193","text":"194"},"Update the dependencies array to be: [setLayout, uploadLayout]",{"range":"195","text":"196"},[2835,2845],"[handleIsDirty, template]",[3164,3171],"[convertToTreeDate, handleIsDirty, items]",[752,765],"[imageBase64, selectBackGroundImage]",[2652,2658],"[name, setTemplateName]",[2730,2744],"[setLayout, uploadLayout]"]